(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* Created By: SaveReadableNotebook *)
(* https://resources.wolframcloud.com/FunctionRepository/resources/SaveReadableNotebook *)

Notebook[
 {
  Cell[StyleData[StyleDefinitions -> "Default.nb"]],
  Cell[
   StyleData["Notebook"],
   PrivateCellOptions -> {
    "AccentStyle" -> {
     CellTrayWidgets -> <|"ChatIncluded" -> <|"Condition" -> True|>|>
    }
   },
   TaggingRules -> <|"ChatNotebookSettings" -> <||>|>,
   CellTrayWidgets -> <|
    "GearMenu" -> <|"Condition" -> False|>,
    "ChatIncluded" -> <|
     "Condition" -> False,
     "Content" ->
      Cell[
       BoxData[
        DynamicBox[
         ToBoxes[Wolfram`Chatbook`$IncludedCellWidget, StandardForm],
         SingleEvaluation -> True
        ]
       ],
       "ChatIncluded"
      ]
    |>,
    "ChatWidget" -> <|
     "Type" -> "Focus",
     "Content" ->
      Cell[
       BoxData[TemplateBox[{}, "ChatWidgetButton"]],
       "ChatWidget"
      ]
    |>
   |>,
   ComponentwiseContextMenu -> <|
    "CellBracket" ->
     Dynamic[
      FEPrivate`Join[{MenuItem[#1, KernelExecute[With[{Wolfram`ChatNB`nbo = InputNotebook[]}, {Wolfram`ChatNB`cells = SelectedCells[Wolfram`ChatNB`nbo]}, Quiet[Needs["Wolfram`Chatbook`" -> None]]; Symbol["Wolfram`Chatbook`ChatbookAction"]["ExclusionToggle", Wolfram`ChatNB`nbo, Wolfram`ChatNB`cells]]], MenuEvaluator -> Automatic, Method -> "Queued"], Delimiter}, FEPrivate`FrontEndResource["ContextMenus", "CellBracket"]] &[
       FEPrivate`FrontEndResource[
        "ChatbookStrings",
        "StylesheetContextMenuIncludeExclude"
       ]
      ]
     ],
    "CellGroup" ->
     Dynamic[
      FEPrivate`Join[{MenuItem[#1, KernelExecute[With[{Wolfram`ChatNB`nbo = InputNotebook[]}, {Wolfram`ChatNB`cells = SelectedCells[Wolfram`ChatNB`nbo]}, Quiet[Needs["Wolfram`Chatbook`" -> None]]; Symbol["Wolfram`Chatbook`ChatbookAction"]["ExclusionToggle", Wolfram`ChatNB`nbo, Wolfram`ChatNB`cells]]], MenuEvaluator -> Automatic, Method -> "Queued"], Delimiter}, FEPrivate`FrontEndResource["ContextMenus", "CellGroup"]] &[
       FEPrivate`FrontEndResource[
        "ChatbookStrings",
        "StylesheetContextMenuIncludeExclude"
       ]
      ]
     ],
    "CellRange" ->
     Dynamic[
      FEPrivate`Join[{MenuItem[#1, KernelExecute[With[{Wolfram`ChatNB`nbo = InputNotebook[]}, {Wolfram`ChatNB`cells = SelectedCells[Wolfram`ChatNB`nbo]}, Quiet[Needs["Wolfram`Chatbook`" -> None]]; Symbol["Wolfram`Chatbook`ChatbookAction"]["ExclusionToggle", Wolfram`ChatNB`nbo, Wolfram`ChatNB`cells]]], MenuEvaluator -> Automatic, Method -> "Queued"], Delimiter}, FEPrivate`FrontEndResource["ContextMenus", "CellRange"]] &[
       FEPrivate`FrontEndResource[
        "ChatbookStrings",
        "StylesheetContextMenuIncludeExclude"
       ]
      ]
     ]
   |>
  ],
  Cell[
   StyleData["ChatStyleSheetInformation"],
   TaggingRules -> <|"StyleSheetVersion" -> "2.3.22.3956381892"|>
  ],
  Cell[
   StyleData["NotebookAssistant`Text"],
   CellMargins -> {{66, 10}, {7, 8}},
   ContextMenu ->
    FEPrivate`FrontEndResource["ContextMenus", "Text"],
   LineSpacing -> {1, 3},
   TabSpacings -> {2.5},
   FontFamily -> "Source Sans Pro",
   FontSize -> 15
  ],
  Cell[
   StyleData["Input"],
   StyleKeyMapping -> {
    "~" -> "ChatDelimiter",
    "'" -> "ChatInput",
    "=" -> "WolframAlphaShort",
    "*" -> "Item",
    ">" -> "ExternalLanguageDefault"
   },
   CellEpilog :>
    With[ { Wolfram`ChatNB`cell = (FinishDynamic[]; EvaluationCell[]) },
     Quiet[Needs["Wolfram`Chatbook`" -> None]];
     Symbol["Wolfram`Chatbook`ChatbookAction"][
      "AIAutoAssist",
      Wolfram`ChatNB`cell
     ]
    ]
  ],
  Cell[
   StyleData["Output"],
   CellTrayWidgets -> <|"GearMenu" -> <|"Condition" -> False|>|>
  ],
  Cell[
   StyleData["Message"],
   CellTrayWidgets -> <|"GearMenu" -> <|"Condition" -> False|>|>
  ],
  Cell[
   StyleData[
    "FramedChatCell",
    StyleDefinitions -> StyleData["NotebookAssistant`Text"]
   ],
   CellFrame -> 2,
   TaggingRules -> <|"ChatNotebookSettings" -> <||>|>,
   ShowCellLabel -> False,
   CellFrameMargins -> {{12, 25}, {8, 8}},
   CellFrameColor ->
    LightDarkSwitched[
     RGBColor[0.92549, 0.941176, 0.960784],
     RGBColor[0.282973, 0.31239, 0.372334]
    ],
   AutoQuoteCharacters -> { },
   PasteAutoQuoteCharacters -> { }
  ],
  Cell[
   StyleData[
    "ChatInput",
    StyleDefinitions -> StyleData["FramedChatCell"]
   ],
   CellDingbat ->
    Cell[
     BoxData[
      DynamicBox[
       ToBoxes[
        If[ TrueQ[CloudSystem`$CloudNotebooks],
         RawBoxes[TemplateBox[{}, "ChatIconUser"]],
         RawBoxes[TemplateBox[{}, "ChatInputActiveCellDingbat"]]
        ],
        StandardForm
       ]
      ]
     ],
     Background -> None,
     CellFrame -> 0,
     CellMargins -> 0
    ],
   CellMargins -> {{66, 32}, {1, 8}},
   StyleKeyMapping -> {
    "~" -> "ChatDelimiter",
    "'" -> "SideChat",
    "=" -> "WolframAlphaShort",
    "*" -> "Item"
   },
   Evaluatable -> True,
   CellGroupingRules -> "InputGrouping",
   TaggingRules -> <|"ChatNotebookSettings" -> <||>|>,
   CellTrayWidgets -> <|"ChatWidget" -> <|"Visible" -> False|>|>,
   CellEvaluationFunction ->
    (Function[
     With[ { Wolfram`ChatNB`cell = (FinishDynamic[]; EvaluationCell[]) },
      Quiet[Needs["Wolfram`Chatbook`" -> None]];
      Symbol["Wolfram`Chatbook`ChatbookAction"][
       "EvaluateChatInput",
       Wolfram`ChatNB`cell
      ]
     ]
    ]),
   CellEventActions -> {
    {"KeyDown", "@"} :>
     With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
      Quiet[Needs["Wolfram`Chatbook`" -> None]];
      Symbol["Wolfram`Chatbook`ChatbookAction"][
       "InsertInlineReference",
       "PersonaTemplate",
       Wolfram`ChatNB`cell
      ]
     ],
    {"KeyDown", "!"} :>
     With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
      Quiet[Needs["Wolfram`Chatbook`" -> None]];
      Symbol["Wolfram`Chatbook`ChatbookAction"][
       "InsertInlineReference",
       "FunctionTemplate",
       Wolfram`ChatNB`cell
      ]
     ],
    {"KeyDown", "#"} :>
     With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
      Quiet[Needs["Wolfram`Chatbook`" -> None]];
      Symbol["Wolfram`Chatbook`ChatbookAction"][
       "InsertInlineReference",
       "ModifierTemplate",
       Wolfram`ChatNB`cell
      ]
     ],
    {"KeyDown", "\\"} :>
     With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
      Quiet[Needs["Wolfram`Chatbook`" -> None]];
      Symbol["Wolfram`Chatbook`ChatbookAction"][
       "InsertInlineReference",
       "WLTemplate",
       Wolfram`ChatNB`cell
      ]
     ],
    "MouseEntered" :>
     With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
      Quiet[Needs["Wolfram`Chatbook`" -> None]];
      Symbol["Wolfram`Chatbook`ChatbookAction"][
       "AccentIncludedCells",
       Wolfram`ChatNB`cell
      ]
     ],
    "MouseExited" :>
     With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
      Quiet[Needs["Wolfram`Chatbook`" -> None]];
      Symbol["Wolfram`Chatbook`ChatbookAction"][
       "RemoveCellAccents",
       Wolfram`ChatNB`cell
      ]
     ]
   },
   CellFrameColor ->
    LightDarkSwitched[
     RGBColor[0.639216, 0.788235, 0.94902],
     RGBColor[0.372097, 0.53277, 0.719639]
    ],
   CellFrameLabels -> {
    {
     None,
     Cell[
      BoxData[
       DynamicBox[
        FEPrivate`FrontEndResource["ChatbookExpressions", "SendChatButton"][
         LightDarkSwitched[
          RGBColor[0.639216, 0.788235, 0.94902],
          RGBColor[0.372097, 0.53277, 0.719639]
         ],
         LightDarkSwitched[
          RGBColor[0.945098, 0.968627, 0.992157],
          RGBColor[0.151078, 0.187077, 0.246627]
         ],
         20
        ]
       ]
      ],
      Background -> None
     ]
    },
    {None, None}
   },
   CellFrameLabelMargins -> -32,
   CounterIncrements -> {"ChatInputCount"},
   MenuSortingValue -> 1543
  ],
  Cell[
   StyleData["ChatInputActiveCellDingbat"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicModuleBox[
       {Wolfram`Chatbook`UI`Private`cell$$},
       DynamicBox[
        ToBoxes[
         Catch[
          Wolfram`Chatbook`Dynamics`Private`$chatBlockTrigger;
          Wolfram`Chatbook`UI`MakeChatInputActiveCellDingbat[
           Wolfram`Chatbook`UI`Private`cell$$,
           Automatic
          ],
          Blank[]
         ],
         StandardForm
        ],
        TrackedSymbols :> {Wolfram`Chatbook`Dynamics`Private`$chatBlockTrigger}
       ],
       Initialization :>
        (Wolfram`Chatbook`UI`Private`cell$$ = EvaluationCell[];
        Needs["Wolfram`Chatbook`" -> None]),
       DynamicModuleValues :> { },
       UnsavedVariables :> {Wolfram`Chatbook`UI`Private`cell$$}
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatInputCellDingbat"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      PaneSelectorBox[
       {
        True ->
         DynamicModuleBox[
          {Wolfram`Chatbook`UI`Private`cell$$},
          DynamicBox[
           ToBoxes[
            Catch[
             Wolfram`Chatbook`Dynamics`Private`$chatBlockTrigger;
             Wolfram`Chatbook`UI`MakeChatInputActiveCellDingbat[
              Wolfram`Chatbook`UI`Private`cell$$,
              True
             ],
             Blank[]
            ],
            StandardForm
           ],
           TrackedSymbols :> {Wolfram`Chatbook`Dynamics`Private`$chatBlockTrigger}
          ],
          Initialization :>
           (Wolfram`Chatbook`UI`Private`cell$$ = EvaluationCell[];
           Needs["Wolfram`Chatbook`" -> None]),
          DynamicModuleValues :> { },
          UnsavedVariables :> {Wolfram`Chatbook`UI`Private`cell$$}
         ],
        False ->
         ButtonBox[
          FrameBox[
           PaneBox[
            TemplateBox[{}, "ChatIconUser"],
            Alignment -> {Center, Center},
            ImageSize -> {25, 25},
            ImageSizeAction -> "ShrinkToFit"
           ],
           Background -> None,
           ContentPadding -> False,
           FrameMargins -> 0,
           FrameStyle -> None,
           ImageMargins -> 0,
           RoundingRadius -> 2,
           StripOnInput -> False
          ],
          ButtonFunction :> Null,
          Appearance -> None,
          ImageMargins -> 0,
          FrameMargins -> 0,
          ContentPadding -> False,
          Evaluator -> Automatic,
          Method -> "Preemptive"
         ]
       },
       Dynamic[CurrentValue["MouseOver"]],
       ImageSize -> Automatic
      ]
     ])
   }
  ],
  Cell[
   StyleData[
    "SideChat",
    StyleDefinitions -> StyleData["ChatInput"]
   ],
   CellFrame -> {{0, 0}, {0, 2}},
   CellDingbat ->
    Cell[
     BoxData[
      RowBox[
       {
        DynamicBox[
         ToBoxes[
          If[ TrueQ[CloudSystem`$CloudNotebooks],
           RawBoxes[TemplateBox[{}, "ChatIconUser"]],
           RawBoxes[TemplateBox[{}, "ChatInputActiveCellDingbat"]]
          ],
          StandardForm
         ]
        ],
        TemplateBox[{12}, "Spacer1"]
       }
      ]
     ],
     CellFrame -> {{0, 0}, {0, 2}},
     CellFrameColor ->
      LightDarkSwitched[
       RGBColor[0.639216, 0.788235, 0.94902],
       RGBColor[0.372097, 0.53277, 0.719639]
      ],
     CellFrameMargins -> 6
    ],
   CellMargins -> {{79, 26}, {Inherited, Inherited}},
   CellDingbatMargin -> 0,
   StyleKeyMapping -> {
    "~" -> "ChatDelimiter",
    "'" -> "ChatSystemInput",
    "Backspace" -> "ChatInput"
   },
   TaggingRules -> <|"ChatNotebookSettings" -> <|"IncludeHistory" -> False|>|>,
   CellTrayWidgets -> <|"ChatWidget" -> <|"Visible" -> False|>|>,
   CellFrameMargins -> {{0, Inherited}, {Inherited, Inherited}},
   CounterIncrements -> { },
   MenuSortingValue -> 1544,
   Background ->
    LightDarkSwitched[
     RGBColor[0.980392, 0.988235, 1.0],
     RGBColor[0.215198, 0.215198, 0.215198]
    ]
  ],
  Cell[
   StyleData[
    "ChatQuery",
    StyleDefinitions -> StyleData["ChatInput"]
   ],
   CellDingbat ->
    Cell[
     BoxData[TemplateBox[{}, "ChatQueryIcon"]],
     Background -> None
    ],
   StyleKeyMapping -> {"~" -> "ChatDelimiter", "'" -> "ChatInput"},
   TaggingRules -> <|"ChatNotebookSettings" -> <||>|>,
   CellTrayWidgets -> <|"ChatWidget" -> <|"Visible" -> False|>|>
  ],
  Cell[
   StyleData[
    "ChatSystemInput",
    StyleDefinitions -> StyleData["ChatInput"]
   ],
   CellFrame -> 1,
   CellDingbat ->
    Cell[
     BoxData[TemplateBox[{}, "ChatSystemIcon"]],
     Background -> None
    ],
   StyleKeyMapping -> {
    "~" -> "ChatDelimiter",
    "'" -> "ChatInput",
    "Backspace" -> "SideChat"
   },
   TaggingRules -> <|"ChatNotebookSettings" -> <||>|>,
   CellTrayWidgets -> <|"ChatWidget" -> <|"Visible" -> False|>|>,
   CellFrameStyle -> Dashing[{Small, Small}],
   CounterIncrements -> { },
   MenuSortingValue -> 1545
  ],
  Cell[
   StyleData[
    "ChatOutput",
    StyleDefinitions -> StyleData["FramedChatCell"]
   ],
   CellDingbat ->
    Cell[
     BoxData[TemplateBox[{}, "AssistantIcon"]],
     Background -> None
    ],
   CellMargins -> {{66, 25}, {12, 5}},
   CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0},
   CellGroupingRules -> "OutputGrouping",
   TaggingRules -> <|"ChatNotebookSettings" -> <||>|>,
   CellTrayWidgets -> <|
    "ChatWidget" -> <|"Visible" -> False|>,
    "ChatFeedback" -> <|
     "Content" ->
      Cell[
       BoxData[
        TagBox[
         GridBox[
          {
           {
            ButtonBox[
             TagBox[
              TagBox[
               TooltipBox[
                PaneSelectorBox[
                 {
                  False ->
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                     "ChatbookExpressions",
                     "ThumbsUpInactive"
                    ]
                   ],
                  True ->
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                     "ChatbookExpressions",
                     "ThumbsUpActive"
                    ]
                   ]
                 },
                 Dynamic[CurrentValue["MouseOver"]],
                 ImageSize -> Automatic,
                 FrameMargins -> 0
                ],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource[
                   "ChatbookStrings",
                   "StylesheetFeedbackButtonTooltip"
                  ],
                  StandardForm
                 ]
                ]
               ],
               Function[
                Annotation[
                 #1,
                 Dynamic[
                  FEPrivate`FrontEndResource[
                   "ChatbookStrings",
                   "StylesheetFeedbackButtonTooltip"
                  ]
                 ],
                 "Tooltip"
                ]
               ]
              ],
              MouseAppearanceTag["LinkHand"]
             ],
             ButtonFunction :>
              With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
               Quiet[Needs["Wolfram`Chatbook`" -> None]];
               Catch[
                Symbol["Wolfram`Chatbook`ChatbookAction"][
                 "SendFeedback",
                 Wolfram`ChatNB`cell$,
                 True
                ],
                Blank[]
               ]
              ],
             Appearance ->
              Dynamic[
               FEPrivate`FrontEndResource[
                "FEExpressions",
                "SuppressMouseDownNinePatchAppearance"
               ]
              ],
             Evaluator -> Automatic,
             Method -> "Preemptive"
            ]
           },
           {
            ButtonBox[
             TagBox[
              TagBox[
               TooltipBox[
                PaneSelectorBox[
                 {
                  False ->
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                     "ChatbookExpressions",
                     "ThumbsDownInactive"
                    ]
                   ],
                  True ->
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                     "ChatbookExpressions",
                     "ThumbsDownActive"
                    ]
                   ]
                 },
                 Dynamic[CurrentValue["MouseOver"]],
                 ImageSize -> Automatic,
                 FrameMargins -> 0
                ],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource[
                   "ChatbookStrings",
                   "StylesheetFeedbackButtonTooltip"
                  ],
                  StandardForm
                 ]
                ]
               ],
               Function[
                Annotation[
                 #1,
                 Dynamic[
                  FEPrivate`FrontEndResource[
                   "ChatbookStrings",
                   "StylesheetFeedbackButtonTooltip"
                  ]
                 ],
                 "Tooltip"
                ]
               ]
              ],
              MouseAppearanceTag["LinkHand"]
             ],
             ButtonFunction :>
              With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
               Quiet[Needs["Wolfram`Chatbook`" -> None]];
               Catch[
                Symbol["Wolfram`Chatbook`ChatbookAction"][
                 "SendFeedback",
                 Wolfram`ChatNB`cell$,
                 False
                ],
                Blank[]
               ]
              ],
             Appearance ->
              Dynamic[
               FEPrivate`FrontEndResource[
                "FEExpressions",
                "SuppressMouseDownNinePatchAppearance"
               ]
              ],
             Evaluator -> Automatic,
             Method -> "Preemptive"
            ]
           }
          },
          GridBoxAlignment -> {"Columns" -> {{Left}}},
          DefaultBaseStyle -> "Column",
          GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {0, 0.25, 0}}
         ],
         "Column"
        ]
       ],
       "ChatFeedback"
      ]
    |>
   |>,
   Initialization :>
    If[ Not[TrueQ[CloudSystem`$CloudNotebooks]],
     With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
      
      NotebookDelete[
       Cells[
        Wolfram`ChatNB`cell$,
        AttachedCell -> True,
        CellStyle -> "ChatMenu"
       ]
      ];

      AttachCell[
       Wolfram`ChatNB`cell$,
       Cell[
        BoxData[
         TemplateBox[
          {
           "ChatOutput",
           LightDarkSwitched[
            RGBColor[0.92549, 0.941176, 0.960784],
            RGBColor[0.157991, 0.172481, 0.209033]
           ]
          },
          "ChatMenuButton"
         ]
        ],
        "ChatMenu"
       ],
       {Right, Top},
       Offset[{-7, -7}, {Right, Top}],
       {Right, Top}
      ]
     ]
    ],
   GeneratedCell -> True,
   CellAutoOverwrite -> True,
   CellFrameColor ->
    LightDarkSwitched[
     RGBColor[0.639216, 0.788235, 0.94902],
     RGBColor[0.1608, 0.2314, 0.30195]
    ],
   ShowAutoSpellCheck -> False,
   CodeAssistOptions -> {"AutoDetectHyperlinks" -> False},
   LineSpacing -> {1.1, 0, 2},
   LanguageCategory -> None,
   Background ->
    LightDarkSwitched[
     RGBColor[0.988235, 0.992157, 1.0],
     RGBColor[0.1373, 0.1647, 0.1961]
    ],
   GraphicsBoxOptions -> {ImageSizeRaw -> {{300}, {220}}},
   Graphics3DBoxOptions -> {ImageSizeRaw -> {{300}, {220}}}
  ],
  Cell[
   StyleData[
    "AssistantOutput",
    StyleDefinitions -> StyleData["ChatOutput"]
   ],
   Initialization :>
    If[ Not[TrueQ[CloudSystem`$CloudNotebooks]],
     With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
      
      NotebookDelete[
       Cells[
        Wolfram`ChatNB`cell$,
        AttachedCell -> True,
        CellStyle -> "ChatMenu"
       ]
      ];

      AttachCell[
       Wolfram`ChatNB`cell$,
       Cell[
        BoxData[
         TagBox[
          GridBox[
           {
            {
             TagBox[
              TooltipBox[
               ButtonBox[
                TemplateBox[{}, "CloseAssistant"],
                ButtonFunction :>
                 With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
                  Quiet[Needs["Wolfram`Chatbook`" -> None]];
                  Catch[
                   Symbol["Wolfram`Chatbook`ChatbookAction"][
                    "DisableAssistance",
                    Wolfram`ChatNB`cell
                   ],
                   Blank[]
                  ]
                 ],
                Appearance ->
                 Dynamic[
                  FEPrivate`FrontEndResource[
                   "FEExpressions",
                   "SuppressMouseDownNinePatchAppearance"
                  ]
                 ],
                Evaluator -> Automatic,
                Method -> "Preemptive"
               ],
               DynamicBox[
                ToBoxes[
                 FEPrivate`FrontEndResource[
                  "ChatbookStrings",
                  "StylesheetAssistantMenuInitializerButtonTooltip"
                 ],
                 StandardForm
                ]
               ]
              ],
              Function[
               Annotation[
                #1,
                Dynamic[
                 FEPrivate`FrontEndResource[
                  "ChatbookStrings",
                  "StylesheetAssistantMenuInitializerButtonTooltip"
                 ]
                ],
                "Tooltip"
               ]
              ]
             ]
            },
            {
             TemplateBox[
              {
               "AssistantOutput",
               LightDarkSwitched[
                RGBColor[0.815686, 0.870588, 0.92549],
                RGBColor[0.310277, 0.362495, 0.434549]
               ]
              },
              "ChatMenuButton"
             ]
            }
           },
           GridBoxAlignment -> {"Columns" -> {{Center}}},
           DefaultBaseStyle -> "Column",
           GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}
          ],
          "Column"
         ]
        ],
        "ChatMenu"
       ],
       {Right, Top},
       Offset[{-7, -7}, {Right, Top}],
       {Right, Top}
      ]
     ]
    ],
   CellFrameColor ->
    LightDarkSwitched[
     RGBColor[0.815686, 0.870588, 0.92549],
     RGBColor[0.310277, 0.362495, 0.434549]
    ],
   Background ->
    LightDarkSwitched[
     RGBColor[0.929412, 0.94902, 0.968627],
     RGBColor[0.248671, 0.283075, 0.337148]
    ]
  ],
  Cell[
   StyleData[
    "AssistantOutputWarning",
    StyleDefinitions -> StyleData["AssistantOutput"]
   ],
   Initialization :>
    If[ Not[TrueQ[CloudSystem`$CloudNotebooks]],
     With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
      
      NotebookDelete[
       Cells[
        Wolfram`ChatNB`cell$,
        AttachedCell -> True,
        CellStyle -> "ChatMenu"
       ]
      ];

      AttachCell[
       Wolfram`ChatNB`cell$,
       Cell[
        BoxData[
         TagBox[
          GridBox[
           {
            {
             TagBox[
              TooltipBox[
               ButtonBox[
                TemplateBox[{}, "CloseAssistant"],
                ButtonFunction :>
                 With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
                  Quiet[Needs["Wolfram`Chatbook`" -> None]];
                  Catch[
                   Symbol["Wolfram`Chatbook`ChatbookAction"][
                    "DisableAssistance",
                    Wolfram`ChatNB`cell
                   ],
                   Blank[]
                  ]
                 ],
                Appearance ->
                 Dynamic[
                  FEPrivate`FrontEndResource[
                   "FEExpressions",
                   "SuppressMouseDownNinePatchAppearance"
                  ]
                 ],
                Evaluator -> Automatic,
                Method -> "Preemptive"
               ],
               DynamicBox[
                ToBoxes[
                 FEPrivate`FrontEndResource[
                  "ChatbookStrings",
                  "StylesheetAssistantMenuInitializerButtonTooltip"
                 ],
                 StandardForm
                ]
               ]
              ],
              Function[
               Annotation[
                #1,
                Dynamic[
                 FEPrivate`FrontEndResource[
                  "ChatbookStrings",
                  "StylesheetAssistantMenuInitializerButtonTooltip"
                 ]
                ],
                "Tooltip"
               ]
              ]
             ]
            },
            {
             TemplateBox[
              {
               "AssistantOutput",
               LightDarkSwitched[
                RGBColor[0.945098, 0.905882, 0.870588],
                RGBColor[0.365394, 0.327654, 0.259258]
               ]
              },
              "ChatMenuButton"
             ]
            }
           },
           GridBoxAlignment -> {"Columns" -> {{Center}}},
           DefaultBaseStyle -> "Column",
           GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}
          ],
          "Column"
         ]
        ],
        "ChatMenu"
       ],
       {Right, Top},
       Offset[{-7, -7}, {Right, Top}],
       {Right, Top}
      ]
     ]
    ],
   CellFrameColor ->
    LightDarkSwitched[
     RGBColor[0.945098, 0.905882, 0.870588],
     RGBColor[0.365394, 0.327654, 0.259258]
    ],
   Background ->
    LightDarkSwitched[
     RGBColor[0.992157, 0.980392, 0.956863],
     RGBColor[0.293586, 0.288716, 0.178978]
    ]
  ],
  Cell[
   StyleData[
    "AssistantOutputError",
    StyleDefinitions -> StyleData["AssistantOutput"]
   ],
   Initialization :>
    If[ Not[TrueQ[CloudSystem`$CloudNotebooks]],
     With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
      
      NotebookDelete[
       Cells[
        Wolfram`ChatNB`cell$,
        AttachedCell -> True,
        CellStyle -> "ChatMenu"
       ]
      ];

      AttachCell[
       Wolfram`ChatNB`cell$,
       Cell[
        BoxData[
         TagBox[
          GridBox[
           {
            {
             TagBox[
              TooltipBox[
               ButtonBox[
                TemplateBox[{}, "CloseAssistant"],
                ButtonFunction :>
                 With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
                  Quiet[Needs["Wolfram`Chatbook`" -> None]];
                  Catch[
                   Symbol["Wolfram`Chatbook`ChatbookAction"][
                    "DisableAssistance",
                    Wolfram`ChatNB`cell
                   ],
                   Blank[]
                  ]
                 ],
                Appearance ->
                 Dynamic[
                  FEPrivate`FrontEndResource[
                   "FEExpressions",
                   "SuppressMouseDownNinePatchAppearance"
                  ]
                 ],
                Evaluator -> Automatic,
                Method -> "Preemptive"
               ],
               DynamicBox[
                ToBoxes[
                 FEPrivate`FrontEndResource[
                  "ChatbookStrings",
                  "StylesheetAssistantMenuInitializerButtonTooltip"
                 ],
                 StandardForm
                ]
               ]
              ],
              Function[
               Annotation[
                #1,
                Dynamic[
                 FEPrivate`FrontEndResource[
                  "ChatbookStrings",
                  "StylesheetAssistantMenuInitializerButtonTooltip"
                 ]
                ],
                "Tooltip"
               ]
              ]
             ]
            },
            {
             TemplateBox[
              {
               "AssistantOutput",
               LightDarkSwitched[
                RGBColor[0.945098, 0.870588, 0.870588],
                RGBColor[0.502255, 0.282848, 0.251799]
               ]
              },
              "ChatMenuButton"
             ]
            }
           },
           GridBoxAlignment -> {"Columns" -> {{Center}}},
           DefaultBaseStyle -> "Column",
           GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}
          ],
          "Column"
         ]
        ],
        "ChatMenu"
       ],
       {Right, Top},
       Offset[{-7, -7}, {Right, Top}],
       {Right, Top}
      ]
     ]
    ],
   CellFrameColor ->
    LightDarkSwitched[
     RGBColor[0.945098, 0.870588, 0.870588],
     RGBColor[0.502255, 0.282848, 0.251799]
    ],
   Background ->
    LightDarkSwitched[
     RGBColor[0.992157, 0.956863, 0.956863],
     RGBColor[0.452838, 0.191624, 0.148936]
    ]
  ],
  Cell[
   StyleData["ChatBlockDivider"],
   CellFrame -> {{0, 0}, {0, 8}},
   CellMargins -> {{5, 25}, {8, 18}},
   StyleKeyMapping -> {"~" -> "ChatDelimiter", "'" -> "ChatInput"},
   CellGroupingRules -> {"SectionGrouping", 30},
   TaggingRules -> <|"ChatNotebookSettings" -> <|"ChatDelimiter" -> True|>|>,
   CellTrayWidgets -> <|"ChatWidget" -> <|"Visible" -> False|>|>,
   PageBreakBelow -> False,
   ShowCellLabel -> False,
   CellFrameMargins -> 4,
   CellFrameColor ->
    LightDarkSwitched[GrayLevel[0.74902], GrayLevel[0.549475]],
   CellFrameLabels -> {
    {
     Cell[
      BoxData[
       DynamicBox[
        ToBoxes[
         If[ TrueQ[CloudSystem`$CloudNotebooks],
          "",
          RawBoxes[TemplateBox[{}, "ChatDelimiterCellDingbat"]]
         ],
         StandardForm
        ]
       ]
      ],
      "Text",
      Background -> None,
      CellFrame -> 0,
      CellMargins -> 0,
      ShowStringCharacters -> False
     ],
     None
    },
    {None, None}
   },
   LineSpacing -> {1, 2},
   LanguageCategory -> "NaturalLanguage",
   CounterIncrements -> "Section",
   CounterAssignments -> {{"ChatInputCount", 0}},
   MenuSortingValue -> 1546,
   FontFamily -> "Source Sans Pro",
   FontSize -> 28,
   FontWeight -> "DemiBold",
   FontColor ->
    LightDarkSwitched[GrayLevel[0.2], GrayLevel[0.961256]]
  ],
  Cell[
   StyleData["ChatDelimiter"],
   CellMargins -> {{5, 0}, {10, 10}},
   CellElementSpacings -> {"CellMinHeight" -> 6},
   StyleKeyMapping -> {"~" -> "ChatBlockDivider", "'" -> "ChatInput"},
   CellGroupingRules -> {"SectionGrouping", 62},
   TaggingRules -> <|"ChatNotebookSettings" -> <|"ChatDelimiter" -> True|>|>,
   CellTrayWidgets -> <|"ChatWidget" -> <|"Visible" -> False|>|>,
   Initialization :>
    NotebookDelete[
     Cells[
      EvaluationCell[],
      AttachedCell -> True,
      CellStyle -> "ChatMenu"
     ]
    ],
   CellEventActions -> {
    "KeyDown" :>
     Switch[
      CurrentValue["EventKey"],
      Alternatives["UpArrow", "LeftArrow"],
      SelectionMove[EvaluationCell[], Before, Cell],
      "~",
      
      NotebookWrite[
       EvaluationCell[],
       Cell["", "ChatBlockDivider"],
       All
      ];

      SelectionMove[EvaluationNotebook[], Before, CellContents];,
      "'",
      
      NotebookDelete[
       Cells[
        EvaluationCell[],
        AttachedCell -> True,
        CellStyle -> "ChatMenu"
       ]
      ];

      NotebookWrite[EvaluationCell[], Cell["", "ChatInput"], All];
      SelectionMove[EvaluationNotebook[], Before, CellContents];,
      Blank[],
      SelectionMove[EvaluationCell[], After, Cell]
     ]
   },
   ShowCellLabel -> False,
   CellFrameMargins -> {{20, 20}, {2, 2}},
   CellFrameLabels -> {
    {
     Cell[
      BoxData[
       DynamicBox[
        ToBoxes[
         If[ TrueQ[CloudSystem`$CloudNotebooks],
          "",
          RawBoxes[TemplateBox[{}, "ChatDelimiterCellDingbat"]]
         ],
         StandardForm
        ]
       ]
      ],
      Background -> None,
      CellFrame -> 0,
      CellMargins -> 0,
      ShowStringCharacters -> False
     ],
     None
    },
    {None, None}
   },
   CounterAssignments -> {{"ChatInputCount", 0}},
   MenuSortingValue -> 1547,
   FontSize -> 6,
   Background ->
    LightDarkSwitched[GrayLevel[0.95], GrayLevel[0.243778]]
  ],
  Cell[
   StyleData["ChatDelimiterCellDingbat"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicModuleBox[
       {Wolfram`ChatNB`cell$$},
       DynamicBox[
        ToBoxes[
         Catch[
          Wolfram`Chatbook`Dynamics`Private`$chatBlockTrigger;
          Wolfram`Chatbook`UI`MakeChatDelimiterCellDingbat[
           Wolfram`ChatNB`cell$$
          ],
          Blank[]
         ],
         StandardForm
        ],
        TrackedSymbols :> {Wolfram`Chatbook`Dynamics`Private`$chatBlockTrigger}
       ],
       Initialization :>
        (Wolfram`ChatNB`cell$$ = EvaluationCell[];
        Needs["Wolfram`Chatbook`" -> None];
        Symbol["Wolfram`Chatbook`ChatbookAction"][
         "UpdateDynamics",
         "ChatBlock"
        ]),
       DynamicModuleValues :> { },
       Deinitialization :>
        (Needs["Wolfram`Chatbook`" -> None];
        Symbol["Wolfram`Chatbook`ChatbookAction"][
         "UpdateDynamics",
         "ChatBlock"
        ]),
       UnsavedVariables :> {Wolfram`ChatNB`cell$$}
      ]
     ])
   }
  ],
  Cell[StyleData["ChatCodeBlock"], Background -> None],
  Cell[StyleData["ChatCodeBlockButtonPanel"]],
  Cell[
   StyleData["ChatPreformatted"],
   CellFrame -> None,
   CellMargins -> {{66, 10}, {8, 8}},
   StripStyleOnPaste -> True,
   CodeAssistOptions -> {"AutoDetectHyperlinks" -> False},
   Hyphenation -> False,
   AutoQuoteCharacters -> { },
   PasteAutoQuoteCharacters -> { },
   LanguageCategory -> "Formula",
   ScriptLevel -> 1,
   ShowStringCharacters -> True,
   FontFamily ->
    Dynamic[AbsoluteCurrentValue[{StyleHints, "CodeFont"}]],
   FontSize -> 13,
   FontWeight -> "Plain",
   Background ->
    LightDarkSwitched[GrayLevel[1], GrayLevel[0.257049]]
  ],
  Cell[
   StyleData[
    "ChatCodeActive",
    StyleDefinitions -> StyleData["Input"]
   ],
   ShowAutoStyles -> False,
   CodeAssistOptions -> {"AutoDetectHyperlinks" -> False},
   FontSize -> 13
  ],
  Cell[
   StyleData["ChatCodeBlockTemplate"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      GridBox[
       {
        {
         FrameBox[
          #1,
          Background ->
           LightDarkSwitched[GrayLevel[1], GrayLevel[0.257049]],
          FrameMargins -> {{10, 10}, {6, 6}},
          FrameStyle ->
           Directive[
            AbsoluteThickness[1],
            LightDarkSwitched[GrayLevel[0.92941], GrayLevel[0.323174]]
           ],
          ImageMargins -> {{0, 0}, {0, 8}},
          ImageSize -> {Full, Automatic}
         ]
        },
        {
         FrameBox[
          DynamicBox[
           ToBoxes[Wolfram`Chatbook`Common`floatingButtonGrid[#1, #2]]
          ],
          Background ->
           LightDarkSwitched[
            RGBColor[0.988235, 0.992157, 1.0],
            RGBColor[0.1373, 0.1647, 0.1961]
           ],
          FrameMargins -> {{7, 2}, {2, 2}},
          FrameStyle ->
           Directive[
            AbsoluteThickness[1],
            LightDarkSwitched[GrayLevel[0.92941], GrayLevel[0.323174]]
           ],
          ImageMargins -> {{0, 0}, {8, -1}},
          ImageSize -> {Full, Automatic}
         ]
        }
       },
       DefaultBaseStyle -> "Column",
       GridBoxAlignment -> {"Columns" -> {{Left}}},
       GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {{0}}}
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatCodeInlineTemplate"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      FrameBox[
       #1,
       Background ->
        LightDarkSwitched[GrayLevel[1], GrayLevel[0.257049]],
       BaselinePosition -> Scaled[0.275],
       FrameMargins -> {{3, 3}, {2, 2}},
       FrameStyle ->
        Directive[
         AbsoluteThickness[1],
         LightDarkSwitched[GrayLevel[0.92941], GrayLevel[0.323174]]
        ],
       ImageMargins -> {{0, 0}, {0, 0}},
       BaseStyle -> {
        "InlineCode",
        AutoSpacing -> False,
        AutoMultiplicationSymbol -> False
       }
      ]
     ])
   }
  ],
  Cell[
   StyleData["Link"],
   FontFamily -> "Source Sans Pro",
   FontColor ->
    Dynamic[
     If[ CurrentValue["MouseOver"],
      LightDarkSwitched[
       RGBColor[0.855, 0.396, 0.145],
       RGBColor[0.979955, 0.652026, 0.52179]
      ],
      LightDarkSwitched[
       RGBColor[0.02, 0.286, 0.651],
       RGBColor[0.2823, 0.6666, 0.949]
      ]
     ]
    ]
  ],
  Cell[
   StyleData["TextRefLink"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      TagBox[
       ButtonBox[
        StyleBox[
         #1,
         ShowStringCharacters -> True,
         FontFamily -> "Source Sans Pro"
        ],
        BaseStyle -> {
         "Link",
         FontColor ->
          LightDarkSwitched[
           RGBColor[0.02, 0.286, 0.651],
           RGBColor[0.2823, 0.6666, 0.949]
          ]
        },
        ButtonData -> #2,
        ContentPadding -> False
       ],
       MouseAppearanceTag["LinkHand"]
      ]
     ])
   }
  ],
  Cell[
   StyleData["InlineFormula"],
   HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"},
   LanguageCategory -> "Formula",
   AutoSpacing -> True,
   ScriptLevel -> 1,
   SingleLetterItalics -> False,
   SpanMaxSize -> 1,
   StyleMenuListing -> None,
   FontFamily -> "Source Sans Pro",
   FontSize -> 1.0 * Inherited,
   ButtonBoxOptions -> {Appearance -> {Automatic, None}},
   FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}},
   GridBoxOptions -> {
    GridBoxItemSize -> {
     "Columns" -> {{Automatic}},
     "ColumnsIndexed" -> { },
     "Rows" -> {{1.0}},
     "RowsIndexed" -> { }
    }
   }
  ],
  Cell[
   StyleData["ChatMenuButton"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      TagBox[
       PaneSelectorBox[
        {
         False ->
          FrameBox[
           ButtonBox[
            TemplateBox[{}, "ChatMenuIcon"],
            ButtonFunction :>
             With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
              Quiet[Needs["Wolfram`Chatbook`" -> None]];
              Symbol["Wolfram`Chatbook`ChatbookAction"][
               "OpenChatMenu",
               #1,
               Wolfram`ChatNB`cell
              ]
             ],
            Appearance ->
             Dynamic[
              FEPrivate`FrontEndResource[
               "FEExpressions",
               "SuppressMouseDownNinePatchAppearance"
              ]
             ],
            Evaluator -> Automatic,
            Method -> "Preemptive"
           ],
           RoundingRadius -> 3,
           FrameStyle -> None,
           Background -> None,
           FrameMargins -> 0,
           ContentPadding -> False,
           StripOnInput -> False
          ],
         True ->
          FrameBox[
           ButtonBox[
            TemplateBox[{}, "ChatMenuIcon"],
            ButtonFunction :>
             With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
              Quiet[Needs["Wolfram`Chatbook`" -> None]];
              Symbol["Wolfram`Chatbook`ChatbookAction"][
               "OpenChatMenu",
               #1,
               Wolfram`ChatNB`cell
              ]
             ],
            Appearance ->
             Dynamic[
              FEPrivate`FrontEndResource[
               "FEExpressions",
               "SuppressMouseDownNinePatchAppearance"
              ]
             ],
            Evaluator -> Automatic,
            Method -> "Preemptive"
           ],
           RoundingRadius -> 3,
           FrameStyle ->
            LightDarkSwitched[
             GrayLevel[1, 0],
             GrayLevel[0.219195, 0.0]
            ],
           Background -> #2,
           FrameMargins -> 0,
           ContentPadding -> False,
           StripOnInput -> False
          ]
        },
        Dynamic[CurrentValue["MouseOver"]],
        ImageSize -> Automatic,
        FrameMargins -> 0
       ],
       MouseAppearanceTag["LinkHand"]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatMenuItemToolbarIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      PaneBox[
       DynamicBox[
        FEPrivate`FrontEndResource[
         "NotebookToolbarExpressions",
         #1
        ]
       ],
       ImageSize -> {16, 16},
       ImageSizeAction -> "ShrinkToFit"
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatMenuItemDelimiter"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      PaneBox[
       StyleBox[
        GraphicsBox[
         {
          CapForm["Round"],
          LightDarkSwitched[GrayLevel[0.9], GrayLevel[0.347785]],
          AbsoluteThickness[2],
          LineBox[{{-1, 0}, {1, 0}}]
         },
         AspectRatio -> Full,
         ImageMargins -> {{0, 0}, {2, 2}},
         ImagePadding -> {{5, 5}, {0, 0}},
         ImageSize -> {Full, 2},
         PlotRange -> {{-1, 1}, {-1, 1}}
        ],
        LineIndent -> 0
       ],
       BaselinePosition -> Baseline,
       FrameMargins -> 0,
       ImageMargins -> 0,
       ImageSize -> Full
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatMenuItem"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      FrameBox[
       TagBox[
        GridBox[
         {
          {
           #1,
           TemplateBox[{7}, "Spacer1"],
           PaneBox[
            StyleBox[#2, "ChatMenuLabel"],
            FrameMargins -> 0,
            ImageMargins -> 0,
            BaselinePosition -> Baseline,
            ImageSize -> Full
           ]
          }
         },
         GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         AutoDelete -> False,
         GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {{0}}}
        ],
        "Grid"
       ],
       Background ->
        Dynamic[
         If[ CurrentValue["MouseOver"],
          LightDarkSwitched[GrayLevel[1], GrayLevel[0.258943]],
          LightDarkSwitched[GrayLevel[0.98], GrayLevel[0.192157]]
         ]
        ],
       BaselinePosition -> Baseline,
       FrameMargins -> {{5, 2}, {2, 2}},
       FrameStyle ->
        Dynamic[
         If[ CurrentValue["MouseOver"],
          LightDarkSwitched[GrayLevel[0.8], GrayLevel[0.468258]],
          LightDarkSwitched[GrayLevel[0.98], GrayLevel[0.193043]]
         ]
        ],
       ImageMargins -> {{0, 0}, {0, 0}},
       ImageSize -> Full,
       RoundingRadius -> 0
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatMenuSection"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      FrameBox[
       TagBox[
        GridBox[
         {
          {
           PaneBox[
            StyleBox[#1, "ChatMenuSectionLabel"],
            FrameMargins -> 0,
            ImageMargins -> 0,
            BaselinePosition -> Baseline,
            ImageSize -> Full
           ]
          }
         },
         GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         AutoDelete -> False,
         GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {{0}}}
        ],
        "Grid"
       ],
       Background ->
        LightDarkSwitched[GrayLevel[0.937], GrayLevel[0.231373]],
       BaselinePosition -> Baseline,
       FrameMargins -> {{5, 2}, {2, 2}},
       FrameStyle -> None,
       ImageMargins -> {{0, 0}, {0, 0}},
       ImageSize -> Full,
       RoundingRadius -> 0
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatOutputMenu"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      PaneBox[
       TemplateBox[
        {
         TagBox[
          GridBox[
           {
            {
             ButtonBox[
              TemplateBox[
               {
                TemplateBox[{"DivideCellsIcon"}, "ChatMenuItemToolbarIcon"],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource[
                   "ChatbookStrings",
                   "StylesheetExplodeCellsInPlace"
                  ],
                  StandardForm
                 ]
                ]
               },
               "ChatMenuItem"
              ],
              ButtonFunction :>
               With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
                {Wolfram`ChatNB`root$ = ParentCell[Wolfram`ChatNB`cell$]},
                Quiet[Needs["Wolfram`Chatbook`" -> None]];
                
                Symbol["Wolfram`Chatbook`ChatbookAction"][
                 "ExplodeInPlace",
                 Wolfram`ChatNB`root$
                ];

                NotebookDelete[Wolfram`ChatNB`cell$];
               ],
              Appearance ->
               Dynamic[
                FEPrivate`FrontEndResource[
                 "FEExpressions",
                 "SuppressMouseDownNinePatchAppearance"
                ]
               ],
              Method -> "Queued",
              Evaluator -> Automatic
             ]
            },
            {
             ButtonBox[
              TemplateBox[
               {
                TemplateBox[{"OverflowIcon"}, "ChatMenuItemToolbarIcon"],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource[
                   "ChatbookStrings",
                   "StylesheetExplodeCellsDuplicate"
                  ],
                  StandardForm
                 ]
                ]
               },
               "ChatMenuItem"
              ],
              ButtonFunction :>
               With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
                {Wolfram`ChatNB`root$ = ParentCell[Wolfram`ChatNB`cell$]},
                Quiet[Needs["Wolfram`Chatbook`" -> None]];
                
                Symbol["Wolfram`Chatbook`ChatbookAction"][
                 "ExplodeDuplicate",
                 Wolfram`ChatNB`root$
                ];

                NotebookDelete[Wolfram`ChatNB`cell$];
               ],
              Appearance ->
               Dynamic[
                FEPrivate`FrontEndResource[
                 "FEExpressions",
                 "SuppressMouseDownNinePatchAppearance"
                ]
               ],
              Method -> "Queued",
              Evaluator -> Automatic
             ]
            },
            {
             ButtonBox[
              TemplateBox[
               {
                TemplateBox[
                 {"HyperlinkCopyIcon"},
                 "ChatMenuItemToolbarIcon"
                ],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource[
                   "ChatbookStrings",
                   "StylesheetCopyExplodedCells"
                  ],
                  StandardForm
                 ]
                ]
               },
               "ChatMenuItem"
              ],
              ButtonFunction :>
               With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
                {Wolfram`ChatNB`root$ = ParentCell[Wolfram`ChatNB`cell$]},
                Quiet[Needs["Wolfram`Chatbook`" -> None]];
                
                Symbol["Wolfram`Chatbook`ChatbookAction"][
                 "CopyExplodedCells",
                 Wolfram`ChatNB`root$
                ];

                NotebookDelete[Wolfram`ChatNB`cell$];
               ],
              Appearance ->
               Dynamic[
                FEPrivate`FrontEndResource[
                 "FEExpressions",
                 "SuppressMouseDownNinePatchAppearance"
                ]
               ],
              Method -> "Queued",
              Evaluator -> Automatic
             ]
            },
            {TemplateBox[{}, "ChatMenuItemDelimiter"]},
            {
             ButtonBox[
              TemplateBox[
               {
                TemplateBox[{"TypesettingIcon"}, "ChatMenuItemToolbarIcon"],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource[
                   "ChatbookStrings",
                   "StylesheetToggleFormatting"
                  ],
                  StandardForm
                 ]
                ]
               },
               "ChatMenuItem"
              ],
              ButtonFunction :>
               With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
                {Wolfram`ChatNB`root$ = ParentCell[Wolfram`ChatNB`cell$]},
                Quiet[Needs["Wolfram`Chatbook`" -> None]];
                
                Symbol["Wolfram`Chatbook`ChatbookAction"][
                 "ToggleFormatting",
                 Wolfram`ChatNB`root$
                ];

                NotebookDelete[Wolfram`ChatNB`cell$];
               ],
              Appearance ->
               Dynamic[
                FEPrivate`FrontEndResource[
                 "FEExpressions",
                 "SuppressMouseDownNinePatchAppearance"
                ]
               ],
              Method -> "Queued",
              Evaluator -> Automatic
             ]
            },
            {
             ButtonBox[
              TemplateBox[
               {
                TemplateBox[{"InPlaceIcon"}, "ChatMenuItemToolbarIcon"],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource[
                   "ChatbookStrings",
                   "StylesheetCopyChatObject"
                  ],
                  StandardForm
                 ]
                ]
               },
               "ChatMenuItem"
              ],
              ButtonFunction :>
               With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
                {Wolfram`ChatNB`root$ = ParentCell[Wolfram`ChatNB`cell$]},
                Quiet[Needs["Wolfram`Chatbook`" -> None]];
                
                Symbol["Wolfram`Chatbook`ChatbookAction"][
                 "CopyChatObject",
                 Wolfram`ChatNB`root$
                ];

                NotebookDelete[Wolfram`ChatNB`cell$];
               ],
              Appearance ->
               Dynamic[
                FEPrivate`FrontEndResource[
                 "FEExpressions",
                 "SuppressMouseDownNinePatchAppearance"
                ]
               ],
              Method -> "Queued",
              Evaluator -> Automatic
             ]
            }
           },
           GridBoxAlignment -> {"Columns" -> {{Left}}},
           DefaultBaseStyle -> "Column",
           GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{0}}},
           GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}
          ],
          "Column"
         ],
         FrameMargins -> 3,
         Background ->
          LightDarkSwitched[GrayLevel[0.98], GrayLevel[0.192157]],
         RoundingRadius -> 3,
         FrameStyle ->
          Directive[
           AbsoluteThickness[1],
           LightDarkSwitched[GrayLevel[0.85], GrayLevel[0.410418]]
          ],
         ImageMargins -> 0
        },
        "Highlighted"
       ],
       ImageSize -> {250, Automatic}
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatMenuLabel"],
   LineBreakWithin -> False,
   LineIndent -> 0,
   FontFamily -> "Source Sans Pro",
   FontSize -> 13,
   FontWeight -> Plain,
   FontColor ->
    LightDarkSwitched[GrayLevel[0.2], GrayLevel[0.944829]]
  ],
  Cell[
   StyleData[
    "ChatMenuSectionLabel",
    StyleDefinitions -> StyleData["ChatMenuLabel"]
   ],
   FontSize -> 13,
   FontColor ->
    LightDarkSwitched[GrayLevel[0.35], GrayLevel[0.85835]]
  ],
  Cell[
   StyleData["AssistantCopyBelow"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "AssistantCopyBelow"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["AssistantCopyClipboard"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "AssistantCopyClipboard"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["AssistantCopyRight"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "AssistantCopyRight"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["AssistantEvaluate"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "AssistantEvaluate"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["AssistantIconActive"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "AssistantIconActive"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["AssistantIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "AssistantIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["BirdnardoIconActive"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "BirdnardoIconActive"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["BirdnardoIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "BirdnardoIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatBlockSettingsMenuIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatBlockSettingsMenuIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatDrivenNotebookIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatDrivenNotebookIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatEnabledNotebookIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatEnabledNotebookIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatExcludedWidget"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatExcludedWidget"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatIconCodeAssistant"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatIconCodeAssistant"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatIconCodeWriter"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatIconCodeWriter"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatIconNotebookAssistant"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatIconNotebookAssistant"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatIconPlainChat"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatIconPlainChat"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatIconUser"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatIconUser"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatInputIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatInputIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatMenuIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatMenuIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatOutputStopButton"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatOutputStopButton"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatQueryIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatQueryIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatSystemIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatSystemIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatSystemMenu"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatSystemMenu"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatUserIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatUserIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatWidgetIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ChatWidgetIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["CloseAssistant"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "CloseAssistant"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["DiscardedMaterial"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "DiscardedMaterial"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["HelperIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "HelperIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ImageNotFound"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ImageNotFound"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["InformationTooltip"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "InformationTooltip"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["InlineReferenceIconAt"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "InlineReferenceIconAt"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["InlineReferenceIconBang"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "InlineReferenceIconBang"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["InlineReferenceIconHash"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "InlineReferenceIconHash"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["InlineReferenceIconHistory"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "InlineReferenceIconHistory"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["InlineReferenceIconPrevious"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "InlineReferenceIconPrevious"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["InlineReferenceIconRight"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "InlineReferenceIconRight"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["MinimizedChatActive"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "MinimizedChatActive"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["MinimizedChat"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "MinimizedChat"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["OpenAILogo"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "OpenAILogo"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["PersonaCode"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "PersonaCode"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["PersonaDocumentation"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "PersonaDocumentation"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["PersonaFromURL"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "PersonaFromURL"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["PersonaOther"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "PersonaOther"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["PersonaRawModel"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "PersonaRawModel"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["PersonaUnknown"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "PersonaUnknown"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["RoleSystem"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "RoleSystem"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["RoleUser"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "RoleUser"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["SideChatIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "SideChatIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ToolIconDocumentationLookup"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ToolIconDocumentationLookup"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ToolIconDocumentationSearcher"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ToolIconDocumentationSearcher"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ToolIconWebFetcher"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ToolIconWebFetcher"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ToolIconWebImageSearcher"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ToolIconWebImageSearcher"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ToolIconWebSearcher"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "ToolIconWebSearcher"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["WolfieIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "WolfieIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["WorkspaceDefaultUserIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicBox[
       FEPrivate`FrontEndResource[
        "ChatbookExpressions",
        "WorkspaceDefaultUserIcon"
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatOutputStopButtonWrapper"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      OverlayBox[
       {
        #1,
        PaneSelectorBox[
         {
          False -> " ",
          True -> TemplateBox[{}, "ChatOutputStopButton"]
         },
         Dynamic[CurrentValue["MouseOver"]],
         ImageSize -> All,
         FrameMargins -> 0
        ]
       },
       {1, 2},
       2,
       Alignment -> {Right, Top}
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatOutputStopButtonProgressWrapper"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      OverlayBox[
       {
        #1,
        PaneSelectorBox[
         {
          False ->
           PaneBox[
            InterpretationBox[
             DynamicBox[
              FEPrivate`FrontEndResource["FEExpressions", "NecklaceAnimator"][
               Tiny
              ]
             ],
             ProgressIndicator[
              Appearance -> "Necklace",
              ImageSize -> Tiny
             ],
             BaseStyle -> {"Deploy"}
            ],
            ImageSize -> {33, Automatic},
            Alignment -> Left
           ],
          True -> TemplateBox[{}, "ChatOutputStopButton"]
         },
         Dynamic[CurrentValue["MouseOver"]],
         ImageSize -> All,
         FrameMargins -> 0
        ]
       },
       {1, 2},
       2,
       Alignment -> {Right, Top}
      ]
     ])
   }
  ],
  Cell[
   StyleData["AssistantIconTabbed"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      TagBox[
       GridBox[
        {
         {
          StyleBox[
           "\"\"",
           ShowStringCharacters -> False,
           StripOnInput -> False
          ]
         },
         {#1},
         {
          DynamicModuleBox[
           {Wolfram`ChatNB`cell$$},
           TagBox[
            GridBox[
             {
              {
               TemplateBox[
                {
                 ButtonBox[
                  TagBox[
                   PaneSelectorBox[
                    {
                     False ->
                      FrameBox[
                       GraphicsBox[
                        {GrayLevel[0.4], PolygonBox[{{0, 0}, {0, 1}, {-0.5, 0.5}}]},
                        ImageSize -> 4
                       ],
                       FrameMargins -> 3,
                       FrameStyle -> None,
                       ImageMargins -> 0,
                       RoundingRadius -> 2,
                       Background -> None,
                       StripOnInput -> False
                      ],
                     True ->
                      FrameBox[
                       GraphicsBox[
                        {GrayLevel[0.4], PolygonBox[{{0, 0}, {0, 1}, {-0.5, 0.5}}]},
                        ImageSize -> 4
                       ],
                       FrameMargins -> 3,
                       FrameStyle -> None,
                       ImageMargins -> 0,
                       RoundingRadius -> 2,
                       Background -> GrayLevel[0.9],
                       StripOnInput -> False
                      ]
                    },
                    Dynamic[CurrentValue["MouseOver"]],
                    ImageSize -> Automatic,
                    FrameMargins -> 0
                   ],
                   MouseAppearanceTag["LinkHand"]
                  ],
                  ButtonFunction :>
                   (Quiet[Needs["Wolfram`Chatbook`" -> None]];
                   Catch[
                    Symbol["Wolfram`Chatbook`ChatbookAction"][
                     "TabLeft",
                     Wolfram`ChatNB`cell$$
                    ],
                    Blank[]
                   ]),
                  Appearance ->
                   Dynamic[
                    FEPrivate`FrontEndResource[
                     "FEExpressions",
                     "SuppressMouseDownNinePatchAppearance"
                    ]
                   ],
                  Evaluator -> Automatic,
                  Method -> "Preemptive"
                 ],
                 ButtonBox[
                  TagBox[
                   PaneSelectorBox[
                    {
                     False ->
                      FrameBox[
                       GraphicsBox[
                        {GrayLevel[0.4], PolygonBox[{{0, 0}, {0, 1}, {0.5, 0.5}}]},
                        ImageSize -> 4
                       ],
                       FrameMargins -> 3,
                       FrameStyle -> None,
                       ImageMargins -> 0,
                       RoundingRadius -> 2,
                       Background -> None,
                       StripOnInput -> False
                      ],
                     True ->
                      FrameBox[
                       GraphicsBox[
                        {GrayLevel[0.4], PolygonBox[{{0, 0}, {0, 1}, {0.5, 0.5}}]},
                        ImageSize -> 4
                       ],
                       FrameMargins -> 3,
                       FrameStyle -> None,
                       ImageMargins -> 0,
                       RoundingRadius -> 2,
                       Background -> GrayLevel[0.9],
                       StripOnInput -> False
                      ]
                    },
                    Dynamic[CurrentValue["MouseOver"]],
                    ImageSize -> Automatic,
                    FrameMargins -> 0
                   ],
                   MouseAppearanceTag["LinkHand"]
                  ],
                  ButtonFunction :>
                   (Quiet[Needs["Wolfram`Chatbook`" -> None]];
                   Catch[
                    Symbol["Wolfram`Chatbook`ChatbookAction"][
                     "TabRight",
                     Wolfram`ChatNB`cell$$
                    ],
                    Blank[]
                   ]),
                  Appearance ->
                   Dynamic[
                    FEPrivate`FrontEndResource[
                     "FEExpressions",
                     "SuppressMouseDownNinePatchAppearance"
                    ]
                   ],
                  Evaluator -> Automatic,
                  Method -> "Preemptive"
                 ]
                },
                "RowDefault"
               ]
              },
              {
               StyleBox[
                RowBox[
                 {
                  DynamicBox[
                   ToBoxes[
                    CurrentValue[
                     Wolfram`ChatNB`cell$$,
                     {TaggingRules, "PageData", "CurrentPage"},
                     1
                    ],
                    StandardForm
                   ]
                  ],
                  "/",
                  DynamicBox[
                   ToBoxes[
                    CurrentValue[
                     Wolfram`ChatNB`cell$$,
                     {TaggingRules, "PageData", "PageCount"},
                     1
                    ],
                    StandardForm
                   ]
                  ]
                 }
                ],
                FontFamily -> "Roboto",
                FontSize -> 10
               ]
              }
             },
             GridBoxAlignment -> {"Columns" -> {{Center}}},
             DefaultBaseStyle -> "Column",
             GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0.1}}}
            ],
            "Column"
           ],
           Initialization :>
            (Wolfram`ChatNB`cell$$ = 
             If[ $CloudEvaluation,
              Wolfram`ChatNB`x;
              EvaluationCell[],
              ParentCell[EvaluationCell[]]
             ]),
           DynamicModuleValues :> { },
           UnsavedVariables :> {Wolfram`ChatNB`cell$$}
          ]
         }
        },
        GridBoxAlignment -> {"Columns" -> {{Center}}},
        DefaultBaseStyle -> "Column",
        GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0.1}}}
       ],
       "Column"
      ]
     ])
   }
  ],
  Cell[
   StyleData[
    "MessageAuthorLabel",
    StyleDefinitions -> StyleData["NotebookAssistant`Text"]
   ],
   ShowStringCharacters -> False,
   FontSize -> 14,
   FontWeight -> "DemiBold"
  ],
  Cell[
   StyleData["UserMessageLabel"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      PaneBox[
       #1,
       BaseStyle -> {"MessageAuthorLabel"},
       ImageSize -> {Scaled[1], Automatic},
       Alignment -> Right,
       FrameMargins -> {{0, 11}, {0, 0}}
      ]
     ])
   }
  ],
  Cell[
   StyleData["AssistantMessageLabel"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      PaneBox[
       #1,
       BaseStyle -> {"MessageAuthorLabel"},
       ImageSize -> {Scaled[1], Automatic},
       Alignment -> Left,
       FrameMargins -> {{11, 0}, {0, 0}}
      ]
     ])
   }
  ],
  Cell[
   StyleData["UserMessageBox"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      PaneBox[
       FrameBox[
        #1,
        BaseStyle -> {"Text", Editable -> False, Selectable -> False},
        Background ->
         LightDarkSwitched[
          RGBColor[0.929412, 0.956863, 0.988235],
          RGBColor[0.247059, 0.305882, 0.403922]
         ],
        FrameMargins -> {{8, 15}, {8, 8}},
        FrameStyle ->
         LightDarkSwitched[
          RGBColor[0.639216, 0.788235, 0.94902],
          RGBColor[0.32549, 0.447059, 0.6]
         ],
        RoundingRadius -> 10,
        StripOnInput -> False
       ],
       Alignment -> Right,
       ImageSize -> {Full, Automatic}
      ]
     ])
   }
  ],
  Cell[
   StyleData["AssistantMessageBox"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      TagBox[
       FrameBox[
        #1,
        BaseStyle -> {"Text", Editable -> False, Selectable -> False},
        Background ->
         LightDarkSwitched[
          RGBColor[0.988235, 0.992157, 1.0],
          RGBColor[0.246064, 0.246064, 0.246064]
         ],
        FrameMargins -> {{15, 8}, {8, 8}},
        FrameStyle ->
         LightDarkSwitched[
          RGBColor[0.788235, 0.8, 0.815686],
          RGBColor[0.468226, 0.481882, 0.505771]
         ],
        ImageSize -> {Scaled[1], Automatic},
        RoundingRadius -> 10,
        StripOnInput -> False
       ],
       EventHandlerTag[
        {
         "MouseEntered" :>
          With[ { Wolfram`ChatNB`cell = EvaluationCell[] },
           Quiet[Needs["Wolfram`Chatbook`" -> None]];
           Symbol["Wolfram`Chatbook`ChatbookAction"][
            "AttachAssistantMessageButtons",
            Wolfram`ChatNB`cell
           ]
          ],
         Method -> "Preemptive",
         PassEventsDown -> Automatic,
         PassEventsUp -> True
        }
       ]
      ]
     ])
   }
  ],
  Cell[
   StyleData["FeedbackButtonsHorizontal"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      TagBox[
       GridBox[
        {
         {
          ButtonBox[
           TagBox[
            TagBox[
             TooltipBox[
              PaneSelectorBox[
               {
                False ->
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                   "ChatbookExpressions",
                   "ThumbsUpInactive"
                  ]
                 ],
                True ->
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                   "ChatbookExpressions",
                   "ThumbsUpActive"
                  ]
                 ]
               },
               Dynamic[CurrentValue["MouseOver"]],
               ImageSize -> Automatic,
               FrameMargins -> 0
              ],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                 "ChatbookStrings",
                 "StylesheetFeedbackButtonTooltip"
                ],
                StandardForm
               ]
              ]
             ],
             Function[
              Annotation[
               #1,
               Dynamic[
                FEPrivate`FrontEndResource[
                 "ChatbookStrings",
                 "StylesheetFeedbackButtonTooltip"
                ]
               ],
               "Tooltip"
              ]
             ]
            ],
            MouseAppearanceTag["LinkHand"]
           ],
           ButtonFunction :>
            With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
             Quiet[Needs["Wolfram`Chatbook`" -> None]];
             Catch[
              Symbol["Wolfram`Chatbook`ChatbookAction"][
               "SendFeedback",
               Wolfram`ChatNB`cell$,
               True
              ],
              Blank[]
             ]
            ],
           Appearance ->
            Dynamic[
             FEPrivate`FrontEndResource[
              "FEExpressions",
              "SuppressMouseDownNinePatchAppearance"
             ]
            ],
           Evaluator -> Automatic,
           Method -> "Preemptive"
          ],
          ButtonBox[
           TagBox[
            TagBox[
             TooltipBox[
              PaneSelectorBox[
               {
                False ->
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                   "ChatbookExpressions",
                   "ThumbsDownInactive"
                  ]
                 ],
                True ->
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                   "ChatbookExpressions",
                   "ThumbsDownActive"
                  ]
                 ]
               },
               Dynamic[CurrentValue["MouseOver"]],
               ImageSize -> Automatic,
               FrameMargins -> 0
              ],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                 "ChatbookStrings",
                 "StylesheetFeedbackButtonTooltip"
                ],
                StandardForm
               ]
              ]
             ],
             Function[
              Annotation[
               #1,
               Dynamic[
                FEPrivate`FrontEndResource[
                 "ChatbookStrings",
                 "StylesheetFeedbackButtonTooltip"
                ]
               ],
               "Tooltip"
              ]
             ]
            ],
            MouseAppearanceTag["LinkHand"]
           ],
           ButtonFunction :>
            With[ { Wolfram`ChatNB`cell$ = EvaluationCell[] },
             Quiet[Needs["Wolfram`Chatbook`" -> None]];
             Catch[
              Symbol["Wolfram`Chatbook`ChatbookAction"][
               "SendFeedback",
               Wolfram`ChatNB`cell$,
               False
              ],
              Blank[]
             ]
            ],
           Appearance ->
            Dynamic[
             FEPrivate`FrontEndResource[
              "FEExpressions",
              "SuppressMouseDownNinePatchAppearance"
             ]
            ],
           Evaluator -> Automatic,
           Method -> "Preemptive"
          ]
         }
        },
        AutoDelete -> False,
        GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings -> {"Columns" -> {{0.2}}}
       ],
       "Grid"
      ]
     ])
   }
  ],
  Cell[StyleData["InlineItem"], ParagraphIndent -> -10],
  Cell[StyleData["InlineSubitem"], ParagraphIndent -> -16],
  Cell[
   StyleData["DropShadowPaneBox"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      PaneBox[
       PanelBox[
        #1,
        Appearance ->
         Image[
          CompressedData[
           "\n1:eJy9lU1LAlEUhqdxdIYYQ5gkwQFNXLiQlkMhLqJVIQhGCK7UUmljoEG0m7/p\n3/AP2HvlvXK6STnFNPB4mcM5z5x7nI/z8UtvaluWtfTw0xu9XS8Wo/f7Ak4e\n5svn2XzydDt/ncwmi8txBsEz4oBNgiNh+vaI49gSHBGbZICzh4zI0TU7zx63\n9KraLMgBF3gCl/GsuMYnv+GWToe1ynMMfJAX+Ix7zHOMa0i3vqb2uqxVngII\nQFEQMJ5nniv8W5fhtg3vCR0lEIIKqHINGQ+YJ/224dazyAnvKSiDGmiAJrjg\n2mC8zDztz+nZGO4s55dnP6quTl8EWqDNNWK8zryAdR490i17LnC/NdZfgZvV\narXRqHPGL5hXYt2ud/08iDn77CHkviN6usq5Xq+1u8t4xLyQdb6eu37O6Nbz\nKPL/anL/d6Bv9N1nvMW8Cuv0XBwxE9Nd5X7VfDtgAB7BlOuA8TbzqgncX/oG\nQ3qHv+j723nTN+D647yT3Cfss8P1oPvkH+7vNJ/LNN8nab4HrTi997cVp/vd\n2ef/8/fy0CPpd/4Dbscq/g==\n      "
          ],
          "Byte",
          ColorSpace -> "RGB",
          ImageResolution -> 72,
          Interleaving -> True
         ],
        ContentPadding -> False,
        FrameMargins -> {{0, 0}, {0, 0}}
       ],
       ImageMargins -> {{40, 50}, {0, 0}}
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatbookPersona"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      NamespaceBox[
       "ChatbookPersonaID",
       DynamicModuleBox[
        { },
        DynamicBox[
         ToBoxes[
          Wolfram`Chatbook`Common`personaTemplateBoxes[
           1,
           #input,
           #state,
           #uuid
          ]
         ]
        ],
        Initialization :>
         (Quiet[Needs["Wolfram`Chatbook`" -> None]];
         Wolfram`Chatbook`$LastInlineReferenceCell = 
          EvaluationCell[])
       ]
      ]
     ]),
    InterpretationFunction ->
     (InterpretationBox["", StringJoin["@", #input]] &)
   }
  ],
  Cell[
   StyleData["ChatbookModifier"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      NamespaceBox[
       "ChatbookModifierID",
       DynamicModuleBox[
        { },
        DynamicBox[
         ToBoxes[
          Wolfram`Chatbook`Common`modifierTemplateBoxes[
           1,
           #input,
           #params,
           #state,
           #uuid
          ]
         ]
        ],
        Initialization :>
         (Quiet[Needs["Wolfram`Chatbook`" -> None]];
         Wolfram`Chatbook`$LastInlineReferenceCell = 
          EvaluationCell[])
       ]
      ]
     ]),
    InterpretationFunction ->
     (InterpretationBox["", StringJoin["#", #input]] &)
   }
  ],
  Cell[
   StyleData["ChatbookFunction"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      NamespaceBox[
       "ChatbookFunctionID",
       DynamicModuleBox[
        { },
        DynamicBox[
         ToBoxes[
          Wolfram`Chatbook`Common`functionTemplateBoxes[
           1,
           #input,
           #params,
           #state,
           #uuid
          ]
         ]
        ],
        Initialization :>
         (Quiet[Needs["Wolfram`Chatbook`" -> None]];
         Wolfram`Chatbook`$LastInlineReferenceCell = 
          EvaluationCell[])
       ]
      ]
     ]),
    InterpretationFunction ->
     (InterpretationBox["", StringJoin["!", #input]] &)
   }
  ],
  Cell[
   StyleData["ChatbookWLTemplate"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      NamespaceBox[
       "ChatbookWLTemplateID",
       DynamicModuleBox[
        { },
        DynamicBox[
         ToBoxes[
          Wolfram`Chatbook`Common`wlTemplateBoxes[
           1,
           #input,
           #state,
           #uuid
          ]
         ]
        ],
        Initialization :>
         (Quiet[Needs["Wolfram`Chatbook`" -> None]];
         Wolfram`Chatbook`$LastInlineReferenceCell = 
          EvaluationCell[])
       ]
      ]
     ]),
    InterpretationFunction ->
     (InterpretationBox["", RowBox[{"\\", #input}]] &)
   }
  ],
  Cell[
   StyleData[
    "InlineReferenceText",
    StyleDefinitions -> StyleData["NotebookAssistant`Text"]
   ],
   FontColor ->
    LightDarkSwitched[GrayLevel[0.2], GrayLevel[0.961256]]
  ],
  Cell[
   StyleData[
    "NotebookAssistant`InlineReferenceText",
    StyleDefinitions -> StyleData["NotebookAssistant`Text"]
   ],
   FontColor ->
    LightDarkSwitched[GrayLevel[0.2], GrayLevel[0.946392]]
  ],
  Cell[
   StyleData["ChatExcluded"],
   CellBracketOptions -> {"Color" -> RGBColor[1, 0.5, 0.5]},
   CellTrayWidgets -> <|
    "ChatWidget" -> <|"Visible" -> False|>,
    "ChatExcludedWidget" -> <|
     "Type" -> "Focus",
     "Content" ->
      Cell[
       BoxData[TemplateBox[{}, "ChatExcludedWidget"]],
       "ChatExcludedWidget"
      ]
    |>
   |>,
   GeneratedCellStyles -> {
    "Graphics" -> {"Graphics", "ChatExcluded"},
    "Message" -> {"Message", "MSG", "ChatExcluded"},
    "Output" -> {"Output", "ChatExcluded"},
    "Print" -> {"Print", "ChatExcluded"},
    "PrintTemporary" -> {"PrintTemporary", "ChatExcluded"}
   }
  ],
  Cell[
   StyleData["ChatWidgetButton"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      ButtonBox[
       TagBox[
        TagBox[
         TooltipBox[
          TemplateBox[{}, "ChatWidgetIcon"],
          DynamicBox[
           ToBoxes[
            FEPrivate`FrontEndResource[
             "ChatbookStrings",
             "StylesheetChatWidgetButtonTooltip"
            ],
            StandardForm
           ]
          ]
         ],
         Function[
          Annotation[
           #1,
           Dynamic[
            FEPrivate`FrontEndResource[
             "ChatbookStrings",
             "StylesheetChatWidgetButtonTooltip"
            ]
           ],
           "Tooltip"
          ]
         ]
        ],
        MouseAppearanceTag["LinkHand"]
       ],
       ButtonFunction :>
        With[ { Wolfram`ChatNB`cell = ParentCell[EvaluationCell[]] },
         Quiet[Needs["Wolfram`Chatbook`" -> None]];
         Catch[
          Symbol["Wolfram`Chatbook`ChatbookAction"][
           "WidgetSend",
           Wolfram`ChatNB`cell
          ],
          Blank[]
         ]
        ],
       Appearance ->
        Dynamic[
         FEPrivate`FrontEndResource[
          "FEExpressions",
          "SuppressMouseDownNinePatchAppearance"
         ]
        ],
       Evaluator -> Automatic,
       Method -> "Preemptive"
      ]
     ])
   }
  ],
  Cell[
   StyleData["ChatCounterLabel"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      StyleBox[
       CounterBox["ChatInputCount"],
       FontFamily -> "Source Sans Pro",
       FontSize -> 10,
       FontColor ->
        LightDarkSwitched[
         RGBColor[0.55433, 0.707942, 0.925795],
         RGBColor[0.463544, 0.62289, 0.853831]
        ],
       FontWeight -> Plain
      ]
     ])
   }
  ],
  Cell[
   StyleData["DiscardedMaterialOpener"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicModuleBox[
       {Typeset`hover$$ = False, Typeset`open$$ = False},
       PaneSelectorBox[
        {
         False ->
          TagBox[
           GridBox[
            {
             {
              TagBox[
               TagBox[
                FrameBox[
                 TagBox[
                  GridBox[
                   {
                    {
                     TemplateBox[{}, "DiscardedMaterial"],
                     "\"Discarded material\"",
                     PaneSelectorBox[
                      {
                       {True, False} ->
                        TemplateBox[
                         {
                          LightDarkSwitched[
                           RGBColor[0.3451, 0.72157, 0.98039],
                           RGBColor[0.341033, 0.628816, 0.848644]
                          ]
                         },
                         "DiscardedMaterialOpenerIcon"
                        ],
                       {False, False} ->
                        TemplateBox[
                         {LightDarkSwitched[GrayLevel[0.7451], GrayLevel[0.536331]]},
                         "DiscardedMaterialOpenerIcon"
                        ],
                       {True, True} ->
                        TemplateBox[
                         {
                          LightDarkSwitched[
                           RGBColor[0.3451, 0.72157, 0.98039],
                           RGBColor[0.341033, 0.628816, 0.848644]
                          ]
                         },
                         "DiscardedMaterialCloserIcon"
                        ],
                       {False, True} ->
                        TemplateBox[
                         {LightDarkSwitched[GrayLevel[0.7451], GrayLevel[0.536331]]},
                         "DiscardedMaterialCloserIcon"
                        ]
                      },
                      Dynamic[{Typeset`hover$$, Typeset`open$$}]
                     ]
                    }
                   },
                   GridBoxAlignment -> {"Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}},
                   AutoDelete -> False,
                   GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}
                  ],
                  "Grid"
                 ],
                 Background ->
                  Dynamic[
                   FEPrivate`If[
                    Typeset`hover$$,
                    LightDarkSwitched[GrayLevel[1], GrayLevel[0.257049]],
                    LightDarkSwitched[
                     RGBColor[0.94902, 0.96863, 0.98824],
                     RGBColor[0.175905, 0.213442, 0.274453]
                    ]
                   ]
                  ],
                 BaseStyle -> {
                  "Text",
                  "IconizedDefaultName",
                  ShowStringCharacters -> False
                 },
                 FrameMargins -> 2,
                 FrameStyle ->
                  LightDarkSwitched[
                   RGBColor[0.9098, 0.93333, 0.95294],
                   RGBColor[0.291162, 0.327969, 0.373167]
                  ],
                 RoundingRadius -> 5,
                 StripOnInput -> False
                ],
                EventHandlerTag[
                 {
                  "MouseEntered" :> FEPrivate`Set[Typeset`hover$$, True],
                  "MouseExited" :> FEPrivate`Set[Typeset`hover$$, False],
                  "MouseClicked" :>
                   FEPrivate`Set[
                    Typeset`open$$,
                    FEPrivate`If[Typeset`open$$, False, True]
                   ],
                  PassEventsDown -> True,
                  Method -> "Preemptive",
                  PassEventsUp -> True
                 }
                ]
               ],
               MouseAppearanceTag["LinkHand"]
              ]
             }
            },
            DefaultBaseStyle -> "Column",
            GridBoxAlignment -> {"Columns" -> {{Left}}},
            GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0.25}}}
           ],
           "Column"
          ],
         True ->
          TagBox[
           GridBox[
            {
             {
              TagBox[
               TagBox[
                FrameBox[
                 TagBox[
                  GridBox[
                   {
                    {
                     TemplateBox[{}, "DiscardedMaterial"],
                     "\"Discarded material\"",
                     PaneSelectorBox[
                      {
                       {True, False} ->
                        TemplateBox[
                         {
                          LightDarkSwitched[
                           RGBColor[0.3451, 0.72157, 0.98039],
                           RGBColor[0.341033, 0.628816, 0.848644]
                          ]
                         },
                         "DiscardedMaterialOpenerIcon"
                        ],
                       {False, False} ->
                        TemplateBox[
                         {LightDarkSwitched[GrayLevel[0.7451], GrayLevel[0.536331]]},
                         "DiscardedMaterialOpenerIcon"
                        ],
                       {True, True} ->
                        TemplateBox[
                         {
                          LightDarkSwitched[
                           RGBColor[0.3451, 0.72157, 0.98039],
                           RGBColor[0.341033, 0.628816, 0.848644]
                          ]
                         },
                         "DiscardedMaterialCloserIcon"
                        ],
                       {False, True} ->
                        TemplateBox[
                         {LightDarkSwitched[GrayLevel[0.7451], GrayLevel[0.536331]]},
                         "DiscardedMaterialCloserIcon"
                        ]
                      },
                      Dynamic[{Typeset`hover$$, Typeset`open$$}]
                     ]
                    }
                   },
                   GridBoxAlignment -> {"Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}},
                   AutoDelete -> False,
                   GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}
                  ],
                  "Grid"
                 ],
                 Background ->
                  Dynamic[
                   FEPrivate`If[
                    Typeset`hover$$,
                    LightDarkSwitched[GrayLevel[1], GrayLevel[0.257049]],
                    LightDarkSwitched[
                     RGBColor[0.94902, 0.96863, 0.98824],
                     RGBColor[0.175905, 0.213442, 0.274453]
                    ]
                   ]
                  ],
                 BaseStyle -> {
                  "Text",
                  "IconizedDefaultName",
                  ShowStringCharacters -> False
                 },
                 FrameMargins -> 2,
                 FrameStyle ->
                  LightDarkSwitched[
                   RGBColor[0.9098, 0.93333, 0.95294],
                   RGBColor[0.291162, 0.327969, 0.373167]
                  ],
                 RoundingRadius -> 5,
                 StripOnInput -> False
                ],
                EventHandlerTag[
                 {
                  "MouseEntered" :> FEPrivate`Set[Typeset`hover$$, True],
                  "MouseExited" :> FEPrivate`Set[Typeset`hover$$, False],
                  "MouseClicked" :>
                   FEPrivate`Set[
                    Typeset`open$$,
                    FEPrivate`If[Typeset`open$$, False, True]
                   ],
                  PassEventsDown -> True,
                  Method -> "Preemptive",
                  PassEventsUp -> True
                 }
                ]
               ],
               MouseAppearanceTag["LinkHand"]
              ]
             },
             {
              FrameBox[
               #1,
               Background ->
                LightDarkSwitched[
                 RGBColor[0.94902, 0.968627, 0.988235],
                 RGBColor[0.175907, 0.213439, 0.274442]
                ],
               FrameMargins -> 10,
               FrameStyle ->
                LightDarkSwitched[
                 RGBColor[0.909804, 0.933333, 0.952941],
                 RGBColor[0.291158, 0.327964, 0.373158]
                ],
               ImageSize -> {Full, Automatic},
               RoundingRadius -> 5,
               StripOnInput -> False
              ]
             }
            },
            DefaultBaseStyle -> "Column",
            GridBoxAlignment -> {"Columns" -> {{Left}}},
            GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0.25}}}
           ],
           "Column"
          ]
        },
        Dynamic[Typeset`open$$],
        ImageMargins -> {{0, 0}, {8, 8}},
        ImageSize -> Automatic,
        Alignment -> Left,
        ContentPadding -> False
       ],
       DynamicModuleValues :> { },
       UnsavedVariables :> {Typeset`hover$$}
      ]
     ])
   }
  ],
  Cell[
   StyleData["DiscardedMaterialOpenerIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      GraphicsBox[
       {
        #1,
        Thickness[0.090909],
        Opacity[1.0],
        FilledCurveBox[
         {
          {
           {0, 2, 0},
           {0, 1, 0},
           {0, 1, 0},
           {0, 1, 0},
           {0, 1, 0},
           {0, 1, 0},
           {0, 1, 0},
           {0, 1, 0},
           {0, 1, 0},
           {0, 1, 0},
           {0, 1, 0}
          }
         },
         {
          {
           {8.5, 4.5},
           {6.5, 4.5},
           {6.5, 2.5},
           {4.5, 2.5},
           {4.5, 4.5},
           {2.5, 4.5},
           {2.5, 6.5},
           {4.5, 6.5},
           {4.5, 8.5},
           {6.5, 8.5},
           {6.5, 6.5},
           {8.5, 6.5}
          }
         }
        ]
       },
       AspectRatio -> Automatic,
       BaselinePosition -> Center -> Center,
       ImageSize -> {11.0, 11.0},
       PlotRange -> {{0.0, 11.0}, {0.0, 11.0}}
      ]
     ])
   }
  ],
  Cell[
   StyleData["DiscardedMaterialCloserIcon"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      GraphicsBox[
       {
        #1,
        Thickness[0.090909],
        Opacity[1.0],
        FilledCurveBox[
         {{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}},
         {{{8.5, 4.5}, {2.5, 4.5}, {2.5, 6.5}, {8.5, 6.5}}}
        ]
       },
       AspectRatio -> Automatic,
       BaselinePosition -> Center -> Center,
       ImageSize -> {11.0, 11.0},
       PlotRange -> {{0.0, 11.0}, {0.0, 11.0}}
      ]
     ])
   }
  ],
  Cell[
   StyleData["TextExpressionLink"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      ButtonBox[
       #1,
       Appearance -> None,
       BaseStyle -> {"Text", "Hyperlink"},
       ButtonFunction :>
        CreateDocument[BinaryDeserialize[BaseDecode[#2]]],
       DefaultBaseStyle -> { },
       Evaluator -> Automatic,
       Method -> "Queued"
      ]
     ])
   }
  ],
  Cell[
   StyleData["ThinkingOpener"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicModuleBox[
       {Typeset`var$$ = True},
       StyleBox[
        PaneSelectorBox[
         {
          False ->
           GridBox[
            {
             {
              TagBox[
               TagBox[
                PaneSelectorBox[
                 {
                  False ->
                   GridBox[
                    {{StyleBox[#2, FontSlant -> "Italic"], "\:f442"}},
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}
                   ],
                  True ->
                   GridBox[
                    {{StyleBox[#2, FontSlant -> "Italic"], "\:f43b"}},
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    BaseStyle -> {
                     FontColor ->
                      LightDarkSwitched[GrayLevel[0.39215], GrayLevel[0.832881]]
                    }
                   ]
                 },
                 Dynamic[CurrentValue["MouseOver"]],
                 BaseStyle -> {
                  FontColor ->
                   LightDarkSwitched[GrayLevel[0.4666], GrayLevel[0.779743]],
                  FontFamily -> "Source Sans Pro",
                  FontSize -> 13.5
                 },
                 ImageSize -> Automatic,
                 FrameMargins -> 0
                ],
                MouseAppearanceTag["Arrow"]
               ],
               EventHandlerTag[
                {
                 "MouseClicked" :> (Typeset`var$$ = Not[Typeset`var$$]),
                 Method -> "Preemptive",
                 PassEventsDown -> Automatic,
                 PassEventsUp -> True
                }
               ]
              ]
             }
            },
            GridBoxAlignment -> {"Columns" -> {{Left}}},
            AutoDelete -> False,
            GridBoxBackground -> {"Columns" -> {{Automatic}}},
            GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0.5}}},
            BaselinePosition -> {1, 1}
           ],
          True ->
           GridBox[
            {
             {
              TagBox[
               TagBox[
                PaneSelectorBox[
                 {
                  False ->
                   GridBox[
                    {{StyleBox[#2, FontSlant -> "Italic"], "\:f442"}},
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}
                   ],
                  True ->
                   GridBox[
                    {{StyleBox[#2, FontSlant -> "Italic"], "\:f43b"}},
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    BaseStyle -> {
                     FontColor ->
                      LightDarkSwitched[GrayLevel[0.39215], GrayLevel[0.832881]]
                    }
                   ]
                 },
                 Dynamic[CurrentValue["MouseOver"]],
                 BaseStyle -> {
                  FontColor ->
                   LightDarkSwitched[GrayLevel[0.4666], GrayLevel[0.779743]],
                  FontFamily -> "Source Sans Pro",
                  FontSize -> 13.5
                 },
                 ImageSize -> Automatic,
                 FrameMargins -> 0
                ],
                MouseAppearanceTag["Arrow"]
               ],
               EventHandlerTag[
                {
                 "MouseClicked" :> (Typeset`var$$ = Not[Typeset`var$$]),
                 Method -> "Preemptive",
                 PassEventsDown -> Automatic,
                 PassEventsUp -> True
                }
               ]
              ]
             },
             {
              PaneBox[
               Cell[
                BoxData[TemplateBox[{#1}, "ThinkingContent"]],
                Background -> None
               ],
               Alignment -> Left,
               ImageMargins -> {{5, 0}, {0, 0}}
              ]
             },
             {
              TagBox[
               TagBox[
                PaneSelectorBox[
                 {
                  False ->
                   GridBox[
                    {
                     {
                      AdjustmentBox[
                       RotationBox["\:f443", BoxRotation -> 3.14159],
                       BoxBaselineShift -> -0.2
                      ],
                      StyleBox[
                       DynamicBox[
                        ToBoxes[
                         FEPrivate`FrontEndResource[
                          "ChatbookStrings",
                          "FormattingHide"
                         ],
                         StandardForm
                        ]
                       ],
                       FontSlant -> "Italic"
                      ]
                     }
                    },
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}
                   ],
                  True ->
                   GridBox[
                    {
                     {
                      AdjustmentBox[
                       RotationBox["\:f449", BoxRotation -> 3.14159],
                       BoxBaselineShift -> -0.2
                      ],
                      StyleBox[
                       DynamicBox[
                        ToBoxes[
                         FEPrivate`FrontEndResource[
                          "ChatbookStrings",
                          "FormattingHide"
                         ],
                         StandardForm
                        ]
                       ],
                       FontSlant -> "Italic"
                      ]
                     }
                    },
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    BaseStyle -> {
                     FontColor ->
                      LightDarkSwitched[GrayLevel[0.39215], GrayLevel[0.832881]]
                    }
                   ]
                 },
                 Dynamic[CurrentValue["MouseOver"]],
                 BaseStyle -> {
                  FontColor ->
                   LightDarkSwitched[GrayLevel[0.4666], GrayLevel[0.779743]],
                  FontFamily -> "Source Sans Pro",
                  FontSize -> 13.5
                 },
                 ImageSize -> Automatic,
                 FrameMargins -> 0
                ],
                MouseAppearanceTag["Arrow"]
               ],
               EventHandlerTag[
                {
                 "MouseClicked" :> (Typeset`var$$ = Not[Typeset`var$$]),
                 Method -> "Preemptive",
                 PassEventsDown -> Automatic,
                 PassEventsUp -> True
                }
               ]
              ]
             }
            },
            GridBoxAlignment -> {"Columns" -> {{Left}}},
            AutoDelete -> False,
            GridBoxBackground -> {"Columns" -> {{Automatic}}},
            GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0.5}}},
            BaselinePosition -> {1, 1}
           ]
         },
         Dynamic[TrueQ[Typeset`var$$]],
         Alignment -> Automatic,
         ImageSize -> Automatic,
         ImageMargins -> {{0, 0}, {10, 10}},
         BaseStyle -> { },
         DefaultBaseStyle -> "OpenerView",
         BaselinePosition -> Baseline
        ],
        Deployed -> False,
        StripOnInput -> False
       ],
       DynamicModuleValues -> Automatic
      ]
     ])
   }
  ],
  Cell[
   StyleData["ThoughtsOpener"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      DynamicModuleBox[
       {Typeset`var$$ = False},
       StyleBox[
        PaneSelectorBox[
         {
          False ->
           GridBox[
            {
             {
              TagBox[
               TagBox[
                PaneSelectorBox[
                 {
                  False ->
                   GridBox[
                    {{StyleBox[#2, FontSlant -> "Italic"], "\:f442"}},
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}
                   ],
                  True ->
                   GridBox[
                    {{StyleBox[#2, FontSlant -> "Italic"], "\:f43b"}},
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    BaseStyle -> {
                     FontColor ->
                      LightDarkSwitched[GrayLevel[0.39215], GrayLevel[0.832881]]
                    }
                   ]
                 },
                 Dynamic[CurrentValue["MouseOver"]],
                 BaseStyle -> {
                  FontColor ->
                   LightDarkSwitched[GrayLevel[0.4666], GrayLevel[0.779743]],
                  FontFamily -> "Source Sans Pro",
                  FontSize -> 13.5
                 },
                 ImageSize -> Automatic,
                 FrameMargins -> 0
                ],
                MouseAppearanceTag["Arrow"]
               ],
               EventHandlerTag[
                {
                 "MouseClicked" :> (Typeset`var$$ = Not[Typeset`var$$]),
                 Method -> "Preemptive",
                 PassEventsDown -> Automatic,
                 PassEventsUp -> True
                }
               ]
              ]
             }
            },
            GridBoxAlignment -> {"Columns" -> {{Left}}},
            AutoDelete -> False,
            GridBoxBackground -> {"Columns" -> {{Automatic}}},
            GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0.5}}},
            BaselinePosition -> {1, 1}
           ],
          True ->
           GridBox[
            {
             {
              TagBox[
               TagBox[
                PaneSelectorBox[
                 {
                  False ->
                   GridBox[
                    {{StyleBox[#2, FontSlant -> "Italic"], "\:f443"}},
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}
                   ],
                  True ->
                   GridBox[
                    {{StyleBox[#2, FontSlant -> "Italic"], "\:f449"}},
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    BaseStyle -> {
                     FontColor ->
                      LightDarkSwitched[GrayLevel[0.39215], GrayLevel[0.832881]]
                    }
                   ]
                 },
                 Dynamic[CurrentValue["MouseOver"]],
                 BaseStyle -> {
                  FontColor ->
                   LightDarkSwitched[GrayLevel[0.4666], GrayLevel[0.779743]],
                  FontFamily -> "Source Sans Pro",
                  FontSize -> 13.5
                 },
                 ImageSize -> Automatic,
                 FrameMargins -> 0
                ],
                MouseAppearanceTag["Arrow"]
               ],
               EventHandlerTag[
                {
                 "MouseClicked" :> (Typeset`var$$ = Not[Typeset`var$$]),
                 Method -> "Preemptive",
                 PassEventsDown -> Automatic,
                 PassEventsUp -> True
                }
               ]
              ]
             },
             {
              PaneBox[
               Cell[
                BoxData[TemplateBox[{#1}, "ThinkingContent"]],
                Background -> None
               ],
               Alignment -> Left,
               ImageMargins -> {{5, 0}, {0, 0}}
              ]
             },
             {
              TagBox[
               TagBox[
                PaneSelectorBox[
                 {
                  False ->
                   GridBox[
                    {
                     {
                      AdjustmentBox[
                       RotationBox["\:f443", BoxRotation -> 3.14159],
                       BoxBaselineShift -> -0.2
                      ],
                      StyleBox[
                       DynamicBox[
                        ToBoxes[
                         FEPrivate`FrontEndResource[
                          "ChatbookStrings",
                          "FormattingHide"
                         ],
                         StandardForm
                        ]
                       ],
                       FontSlant -> "Italic"
                      ]
                     }
                    },
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}
                   ],
                  True ->
                   GridBox[
                    {
                     {
                      AdjustmentBox[
                       RotationBox["\:f449", BoxRotation -> 3.14159],
                       BoxBaselineShift -> -0.2
                      ],
                      StyleBox[
                       DynamicBox[
                        ToBoxes[
                         FEPrivate`FrontEndResource[
                          "ChatbookStrings",
                          "FormattingHide"
                         ],
                         StandardForm
                        ]
                       ],
                       FontSlant -> "Italic"
                      ]
                     }
                    },
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    BaseStyle -> {
                     FontColor ->
                      LightDarkSwitched[GrayLevel[0.39215], GrayLevel[0.832881]]
                    }
                   ]
                 },
                 Dynamic[CurrentValue["MouseOver"]],
                 BaseStyle -> {
                  FontColor ->
                   LightDarkSwitched[GrayLevel[0.4666], GrayLevel[0.779743]],
                  FontFamily -> "Source Sans Pro",
                  FontSize -> 13.5
                 },
                 ImageSize -> Automatic,
                 FrameMargins -> 0
                ],
                MouseAppearanceTag["Arrow"]
               ],
               EventHandlerTag[
                {
                 "MouseClicked" :> (Typeset`var$$ = Not[Typeset`var$$]),
                 Method -> "Preemptive",
                 PassEventsDown -> Automatic,
                 PassEventsUp -> True
                }
               ]
              ]
             }
            },
            GridBoxAlignment -> {"Columns" -> {{Left}}},
            AutoDelete -> False,
            GridBoxBackground -> {"Columns" -> {{Automatic}}},
            GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0.5}}},
            BaselinePosition -> {1, 1}
           ]
         },
         Dynamic[TrueQ[Typeset`var$$]],
         Alignment -> Automatic,
         ImageSize -> Automatic,
         ImageMargins -> {{0, 0}, {10, 10}},
         BaseStyle -> { },
         DefaultBaseStyle -> "OpenerView",
         BaselinePosition -> Baseline
        ],
        Deployed -> False,
        StripOnInput -> False
       ],
       DynamicModuleValues -> Automatic
      ]
     ])
   }
  ],
  Cell[
   StyleData["ThinkingContent"],
   TemplateBoxOptions -> {
    DisplayFunction ->
     (Function[
      GridBox[
       {
        {
         PaneBox[
          Cell[
           #1,
           "Text",
           FontColor ->
            LightDarkSwitched[GrayLevel[0.35], GrayLevel[0.860775]],
           FontSize -> 12,
           Background -> None,
           Editable -> True
          ],
          Alignment -> Left,
          ImageMargins -> {{5, 5}, {5, 5}},
          ImageSize -> {Scaled[1], Automatic}
         ]
        }
       },
       AutoDelete -> False,
       GridBoxBackground -> {
        "Columns" -> {{LightDarkSwitched[GrayLevel[1], GrayLevel[0.257049]]}}
       },
       GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       GridBoxDividers -> {
        "ColumnsIndexed" -> {
         1 ->
          Directive[
           LightDarkSwitched[GrayLevel[0.8196], GrayLevel[0.457003]],
           AbsoluteThickness[2]
          ]
        },
        "Rows" -> {{False}}
       }
      ]
     ])
   }
  ]
 },
 StyleDefinitions -> "PrivateStylesheetFormatting.nb"
]