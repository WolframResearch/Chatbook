(* ::**************************************************************************************************************:: *)
(* ::Section::Closed:: *)
(*Initialization*)
VerificationTest[
    If[ ! TrueQ @ Wolfram`ChatbookTests`$TestDefinitionsLoaded,
        Get @ FileNameJoin @ { DirectoryName[ $TestFileName ], "Common.wl" }
    ],
    Null,
    SameTest -> MatchQ,
    TestID   -> "GetDefinitions@@Tests/CodeCheck.wlt:4,1-11,2"
]

VerificationTest[
    Needs[ "Wolfram`Chatbook`CodeCheck`" ],
    Null,
    SameTest -> MatchQ,
    TestID   -> "LoadContext@@Tests/CodeCheck.wlt:13,1-18,2"
]

VerificationTest[
    Context @ CodeCheckFix,
    "Wolfram`Chatbook`CodeCheck`",
    SameTest -> MatchQ,
    TestID   -> "CodeCheckFix-Context@@Tests/CodeCheck.wlt:20,1-25,2"
]

(* ::**************************************************************************************************************:: *)
(* ::Section::Closed:: *)
(*CodeCheckFix*)
VerificationTest[CodeCheckFix["f1[x,y,]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 8}, {1, 8}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 7}, {1, 8}}|>]}|>]}, "OverallSeverity" -> 3|>, "FixedCode" -> "f1[x,y]", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "OriginalCode" -> "f1[x,y,]"|>
	,TestID->"1_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["f1[x,y,],"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["CommaTopLevel", "Comma at top-level.", "Fatal", <|Source -> {{1, 1}, {1, 10}}, ConfidenceLevel -> 1.|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 8}, {1, 8}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 7}, {1, 8}}|>]}|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 10}, {1, 10}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 9}, {1, 10}}|>]}|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> Missing["Pattern not handled", {{"Error", "Comma"}, {"Error", "Comma"}, {"Fatal", "CommaTopLevel"}}], "Success" -> False, "OriginalCode" -> "f1[x,y,],"|>
	,TestID->"2_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["f1[x,y,(*comment*)]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 19}, {1, 19}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 18}, {1, 19}}|>]}|>]}, "OverallSeverity" -> 3|>, "FixedCode" -> "f1[x,y,(*comment*)]", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "f1[x,y,(*comment*)]"|>
	,TestID->"3_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix[codestring = "f1[x,y,(*comment*),z]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 19}, {1, 19}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 18}, {1, 19}}|>]}|>]}, "OverallSeverity" -> 3|>, "FixedCode" -> "f1[x,y,(*comment*),z]", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "f1[x,y,(*comment*),z]"|>
	,TestID->"4_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["f1[x,y,,(*comment*),]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 8}, {1, 8}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 7}, {1, 8}}|>]}|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 20}, {1, 20}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 19}, {1, 20}}|>]}|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 21}, {1, 21}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 20}, {1, 21}}|>]}|>]}, "OverallSeverity" -> 3|>, "FixedCode" -> "f1[x,y,(*comment*)]", "Success" -> True, "SuccessRatio" -> {3, 3}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "f1[x,y,,(*comment*),]"|>
	,TestID->"5_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["f1[x,y,(*comment*)];g[x,y,z]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 19}, {1, 19}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 18}, {1, 19}}|>]}|>]}, "OverallSeverity" -> 3|>, "FixedCode" -> "f1[x,y,(*comment*)];g[x,y,z]", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "f1[x,y,(*comment*)];g[x,y,z]"|>
	,TestID->"6_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["f1[{x,y,}z]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 9}, {1, 9}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 8}, {1, 9}}|>]}|>]}, "OverallSeverity" -> 3|>, "FixedCode" -> "f1[{x,y}z]", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "OriginalCode" -> "f1[{x,y,}z]"|>
	,TestID->"7_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["{f1[x,,y]}"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 7}, {1, 7}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 6}, {1, 7}}|>]}|>]}, "OverallSeverity" -> 3|>, "FixedCode" -> "{f1[x,y]}", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "OriginalCode" -> "{f1[x,,y]}"|>
	,TestID->"8_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["{f1[,x]}"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 5}, {1, 5}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 5}, {1, 6}}|>]}|>]}, "OverallSeverity" -> 3|>, "FixedCode" -> "{f1[x]}", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "OriginalCode" -> "{f1[,x]}"|>
	,TestID->"9_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n...\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 1}, {3, 1}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n...\n", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n...\n"|>
	,TestID->"10_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n    ...\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 5}, {3, 5}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n    ...\n", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n    ...\n"|>
	,TestID->"11_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nminValue = NMinimize[{f[k], constraint1, constraint2, ...}, {k, kMin, kMax}]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{2, 55}, {2, 55}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nminValue = NMinimize[{f[k], constraint1, constraint2, ...}, {k, kMin, kMax}]\n", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nminValue = NMinimize[{f[k], constraint1, constraint2, ...}, {k, kMin, kMax}]\n"|>
	,TestID->"12_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nlist = {a1, a2, a3, ..., an};  (* replace with your list of numbers *)\nmodResults = Mod[Rest[list], Most[list]]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{2, 21}, {2, 21}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nlist = {a1, a2, a3, ..., an};  (* replace with your list of numbers *)\nmodResults = Mod[Rest[list], Most[list]]\n", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nlist = {a1, a2, a3, ..., an};  (* replace with your list of numbers *)\nmodResults = Mod[Rest[list], Most[list]]\n"|>
	,TestID->"13_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\n(* Define your function *)\n\tf[k_] := Module[{...}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 19}, {3, 19}}, ConfidenceLevel -> 1.|>], InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 25}, {3, 25}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\n(* Define your function *)\n\tf[k_] := Module[{...}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n", "Success" -> True, "SuccessRatio" -> {2, 2}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\n(* Define your function *)\n\tf[k_] := Module[{...}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n"|>
	,TestID->"14_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nGraphics3D[\n\t  Module[{...}, \n\t    ...\n\t    (*The full base perimeter now in black*)\n\t    {Black, Line[{{-14.5, -14.5, 29}, {14.5, -14.5, 29}, {14.5, 14.5, 29}, {-14.5, 14.5, 29}, {-14.5, -14.5, 29}}]}\n\t    ...\n\t  ], \n\t  ...\n\t]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 12}, {3, 12}}, ConfidenceLevel -> 1.|>], InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{4, 6}, {4, 6}}, ConfidenceLevel -> 1.|>], InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{9, 4}, {9, 4}}, ConfidenceLevel -> 1.|>], InspectionObject["ImplicitTimesAcrossLines", "Implicit ``Times`` across lines.", "Error", <|Source -> {{5, 46}, {6, 1}}, ConfidenceLevel -> 0.95, CodeActions -> {CodeAction["Insert ``*``", InsertNode, <|Source -> {{5, 46}, {6, 1}}, "InsertionNode" -> LeafNode[Token`Star, "*", <||>]|>], CodeAction["Insert ``;``", InsertNode, <|Source -> {{5, 46}, {6, 1}}, "InsertionNode" -> LeafNode[Token`Semi, ";", <||>]|>], CodeAction["Insert ``,``", InsertNode, <|Source -> {{5, 46}, {6, 1}}, "InsertionNode" -> LeafNode[Token`Comma, ",", <||>]|>]}|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> Missing["Pattern not handled", {{"Error", "ImplicitTimesAcrossLines"}, {"Fatal", "ExpectedOperand"}, {"Fatal", "ExpectedOperand"}, {"Fatal", "ExpectedOperand"}}], "Success" -> False, "OriginalCode" -> "\nGraphics3D[\n\t  Module[{...}, \n\t    ...\n\t    (*The full base perimeter now in black*)\n\t    {Black, Line[{{-14.5, -14.5, 29}, {14.5, -14.5, 29}, {14.5, 14.5, 29}, {-14.5, 14.5, 29}, {-14.5, -14.5, 29}}]}\n\t    ...\n\t  ], \n\t  ...\n\t]\n"|>
	,TestID->"15_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["k->(* 111 *);"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{1, 13}, {1, 13}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "k->(* 111 *);", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "k->(* 111 *);"|>
	,TestID->"16_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["k->;"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{1, 4}, {1, 4}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> Missing["Expected Operand (no place holder(s) detected)"], "Success" -> False, "SuccessRatio" -> {0, 1}, "LikelyFalsePositive" -> Missing[], "SafeToEvaluate" -> Missing[], "OriginalCode" -> "k->;"|>
	,TestID->"17_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["k:=(* 111 *);"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{1, 13}, {1, 13}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "k:=(* 111 *);", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "k:=(* 111 *);"|>
	,TestID->"18_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["k[a_]:=   (* 111 *)   ;"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{1, 23}, {1, 23}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "k[a_]:=   (* 111 *)   ;", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "k[a_]:=   (* 111 *)   ;"|>
	,TestID->"19_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["k[,(* 111 *)];"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 3}, {1, 3}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 3}, {1, 4}}|>]}|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 13}, {1, 13}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 12}, {1, 13}}|>]}|>]}, "OverallSeverity" -> 3|>, "FixedCode" -> "k[(* 111 *)];", "Success" -> True, "SuccessRatio" -> {2, 2}, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "OriginalCode" -> "k[,(* 111 *)];"|>
	,TestID->"20_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] = (* your existing function definition *)\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{4, 1}, {4, 1}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] = (* your existing function definition *)\n", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] = (* your existing function definition *)\n"|>
	,TestID->"21_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =      (* your existing function definition *)    \n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{4, 1}, {4, 1}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =      (* your existing function definition *)    \n", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =      (* your existing function definition *)    \n"|>
	,TestID->"22_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nMixtilinearExcircles[triangle_] := Module[\n  {circumcircle, vertices, excircles},\n  vertices = triangle;\n  circumcircle = Circumsphere[Triangle[vertices]];\n  \n  excircles = Table[\n    Module[{vertex, tangentPoint, excircleCenter, excircleRadius},\n      vertex = vertices[[i]];\n      \n      (* Calculate tangent point on the circumcircle *)\n      tangentPoint = (* Obtain the correct tangent point here *);\n      \n      (* Calculate the center of the excircle *)\n      excircleCenter = (* Calculate the center based on tangent properties *);\n      \n      (* Calculate the radius of the excircle *)\n      excircleRadius = Norm[excircleCenter - tangentPoint];\n      \n      {Circle[excircleCenter, excircleRadius]}\n    ],\n    {i, Length[vertices]}\n  ];\n  \n  excircles\n]\n\n(* Example usage *)\ntriangle = {{0, 0}, {4, 3}, {4, 0}};\nMixtilinearExcircles[triangle]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{12, 65}, {12, 65}}, ConfidenceLevel -> 1.|>], InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{15, 78}, {15, 78}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nMixtilinearExcircles[triangle_] := Module[\n  {circumcircle, vertices, excircles},\n  vertices = triangle;\n  circumcircle = Circumsphere[Triangle[vertices]];\n  \n  excircles = Table[\n    Module[{vertex, tangentPoint, excircleCenter, excircleRadius},\n      vertex = vertices[[i]];\n      \n      (* Calculate tangent point on the circumcircle *)\n      tangentPoint = (* Obtain the correct tangent point here *);\n      \n      (* Calculate the center of the excircle *)\n      excircleCenter = (* Calculate the center based on tangent properties *);\n      \n      (* Calculate the radius of the excircle *)\n      excircleRadius = Norm[excircleCenter - tangentPoint];\n      \n      {Circle[excircleCenter, excircleRadius]}\n    ],\n    {i, Length[vertices]}\n  ];\n  \n  excircles\n]\n\n(* Example usage *)\ntriangle = {{0, 0}, {4, 3}, {4, 0}};\nMixtilinearExcircles[triangle]\n", "Success" -> True, "SuccessRatio" -> {2, 2}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nMixtilinearExcircles[triangle_] := Module[\n  {circumcircle, vertices, excircles},\n  vertices = triangle;\n  circumcircle = Circumsphere[Triangle[vertices]];\n  \n  excircles = Table[\n    Module[{vertex, tangentPoint, excircleCenter, excircleRadius},\n      vertex = vertices[[i]];\n      \n      (* Calculate tangent point on the circumcircle *)\n      tangentPoint = (* Obtain the correct tangent point here *);\n      \n      (* Calculate the center of the excircle *)\n      excircleCenter = (* Calculate the center based on tangent properties *);\n      \n      (* Calculate the radius of the excircle *)\n      excircleRadius = Norm[excircleCenter - tangentPoint];\n      \n      {Circle[excircleCenter, excircleRadius]}\n    ],\n    {i, Length[vertices]}\n  ];\n  \n  excircles\n]\n\n(* Example usage *)\ntriangle = {{0, 0}, {4, 3}, {4, 0}};\nMixtilinearExcircles[triangle]\n"|>
	,TestID->"23_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     ... (* your existing function definition *)    \n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 21}, {3, 21}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     ... (* your existing function definition *)    \n", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     ... (* your existing function definition *)    \n"|>
	,TestID->"24_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     (* your existing function definition *) ...    \n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 61}, {3, 61}}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     (* your existing function definition *) ...    \n", "Success" -> True, "SuccessRatio" -> {1, 1}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     (* your existing function definition *) ...    \n"|>
	,TestID->"25_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["f1[x,...,y,]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{1, 6}, {1, 6}}, ConfidenceLevel -> 1.|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{1, 12}, {1, 12}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{1, 11}, {1, 12}}|>]}|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "f1[x,...,y]", "Success" -> True, "SuccessRatio" -> {2, 2}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "f1[x,...,y,]"|>
	,TestID->"26_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\nranges = Tuples[{{-1, 0, , 1}, Range[-3, 3], Range[-3, 3]}];\n...\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 1}, {3, 1}}, ConfidenceLevel -> 1.|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{2, 26}, {2, 26}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{2, 25}, {2, 26}}|>]}|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n...\n", "Success" -> True, "SuccessRatio" -> {2, 2}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\nranges = Tuples[{{-1, 0, , 1}, Range[-3, 3], Range[-3, 3]}];\n...\n"|>
	,TestID->"27_CodeCheckFix_UT"]
VerificationTest[CodeCheckFix["\n(* Define your function *)\n\tf[k_] := Module[{...,,,}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 19}, {3, 19}}, ConfidenceLevel -> 1.|>], InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|Source -> {{3, 28}, {3, 28}}, ConfidenceLevel -> 1.|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{3, 23}, {3, 23}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{3, 22}, {3, 23}}|>]}|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{3, 24}, {3, 24}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{3, 23}, {3, 24}}|>]}|>], InspectionObject["Comma", "Extra ``,``.", "Error", <|Source -> {{3, 25}, {3, 25}}, ConfidenceLevel -> 1., CodeActions -> {CodeAction["Delete ``,``", DeleteText, <|Source -> {{3, 24}, {3, 25}}|>]}|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> "\n(* Define your function *)\n\tf[k_] := Module[{...}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n", "Success" -> True, "SuccessRatio" -> {5, 5}, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "OriginalCode" -> "\n(* Define your function *)\n\tf[k_] := Module[{...,,,}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n"|>
	,TestID->"28_CodeCheckFix_UT"]