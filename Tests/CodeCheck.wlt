(* ::**************************************************************************************************************:: *)
(* ::Section::Closed:: *)
(*Initialization*)
VerificationTest[
    Needs[ "Wolfram`ChatbookTests`", FileNameJoin @ { DirectoryName[ $TestFileName ], "Common.wl" } ],
    Null,
    SameTest -> MatchQ,
    TestID   -> "GetDefinitions@@Tests/CodeCheck.wlt:4,1-9,2"
]

VerificationTest[
    Needs[ "Wolfram`Chatbook`CodeCheck`" ],
    Null,
    SameTest -> MatchQ,
    TestID   -> "LoadContext@@Tests/CodeCheck.wlt:11,1-16,2"
]

VerificationTest[
    Context @ CodeCheckFix,
    "Wolfram`Chatbook`CodeCheck`",
    SameTest -> MatchQ,
    TestID   -> "CodeCheckFix-Context@@Tests/CodeCheck.wlt:18,1-23,2"
]

(* ::**************************************************************************************************************:: *)
(* ::Section::Closed:: *)
(*CodeCheckFix*)
VerificationTest[CodeCheckFix["f1[x,y,]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {8, 7}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{8, 7}]|>]}|>]}, "OverallSeverity" -> 3|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "f1[x,y]", "FixedPatterns" -> {{{"Error", "Comma"}}}, "OriginalCode" -> "f1[x,y,]"|>
	,TestID->"1_CodeCheckFix_UT@@Tests/CodeCheck.wlt:28,1-29,31"]
VerificationTest[CodeCheckFix["f1[x,y,],"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["CommaTopLevel", "Comma at top-level.", "Fatal", <|CodeParser`Source -> {1, 9}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {8, 7}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{8, 7}]|>]}|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {10, 9}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{10, 9}]|>]}|>]}, "OverallSeverity" -> 4|>, "Success" -> False, "TotalFixes" -> 0, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> False, "FixedCode" -> Missing["Pattern not handled", {{"Error", "Comma"}, {"Error", "Comma"}, {"Fatal", "CommaTopLevel"}}], "FixedPatterns" -> {{{"Error", "Comma"}, {"Error", "Comma"}, {"Fatal", "CommaTopLevel"}}}, "OriginalCode" -> "f1[x,y,],"|>
	,TestID->"2_CodeCheckFix_UT@@Tests/CodeCheck.wlt:30,1-31,31"]
VerificationTest[CodeCheckFix["f1[x,y,(*comment*)]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {19, 18}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{19, 18}]|>]}|>]}, "OverallSeverity" -> 3|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "f1[x,y,(*comment*)]", "FixedPatterns" -> {{{"Error", "Comma"}}}, "OriginalCode" -> "f1[x,y,(*comment*)]"|>
	,TestID->"3_CodeCheckFix_UT@@Tests/CodeCheck.wlt:32,1-33,31"]
VerificationTest[CodeCheckFix[codestring = "f1[x,y,(*comment*),z]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {19, 18}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{19, 18}]|>]}|>]}, "OverallSeverity" -> 3|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "f1[x,y,(*comment*),z]", "FixedPatterns" -> {{{"Error", "Comma"}}}, "OriginalCode" -> "f1[x,y,(*comment*),z]"|>
	,TestID->"4_CodeCheckFix_UT@@Tests/CodeCheck.wlt:34,1-35,31"]
VerificationTest[CodeCheckFix["f1[x,y,,(*comment*),]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {8, 7}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{8, 7}]|>]}|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {20, 19}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{20, 19}]|>]}|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {21, 20}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{21, 20}]|>]}|>]}, "OverallSeverity" -> 3|>, "Success" -> True, "TotalFixes" -> 2, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "f1[x,y,(*comment*)]", "FixedPatterns" -> {{{"Error", "Comma"}, {"Error", "Comma"}, {"Error", "Comma"}}}, "OriginalCode" -> "f1[x,y,,(*comment*),]"|>
	,TestID->"5_CodeCheckFix_UT@@Tests/CodeCheck.wlt:36,1-37,31"]
VerificationTest[CodeCheckFix["f1[x,y,(*comment*)];g[x,y,z]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {19, 18}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{19, 18}]|>]}|>]}, "OverallSeverity" -> 3|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "f1[x,y,(*comment*)];g[x,y,z]", "FixedPatterns" -> {{{"Error", "Comma"}}}, "OriginalCode" -> "f1[x,y,(*comment*)];g[x,y,z]"|>
	,TestID->"6_CodeCheckFix_UT@@Tests/CodeCheck.wlt:38,1-39,31"]
VerificationTest[CodeCheckFix["f1[{x,y,}z]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {9, 8}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{9, 8}]|>]}|>]}, "OverallSeverity" -> 3|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "f1[{x,y}z]", "FixedPatterns" -> {{{"Error", "Comma"}}}, "OriginalCode" -> "f1[{x,y,}z]"|>
	,TestID->"7_CodeCheckFix_UT@@Tests/CodeCheck.wlt:40,1-41,31"]
VerificationTest[CodeCheckFix["{f1[x,,y]}"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {7, 6}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{7, 6}]|>]}|>]}, "OverallSeverity" -> 3|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "{f1[x,y]}", "FixedPatterns" -> {{{"Error", "Comma"}}}, "OriginalCode" -> "{f1[x,,y]}"|>
	,TestID->"8_CodeCheckFix_UT@@Tests/CodeCheck.wlt:42,1-43,31"]
VerificationTest[CodeCheckFix["{f1[,x]}"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {5, 4}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`nextSrc[{5, 4}]|>]}|>]}, "OverallSeverity" -> 3|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "{f1[x]}", "FixedPatterns" -> {{{"Error", "Comma"}}}, "OriginalCode" -> "{f1[,x]}"|>
	,TestID->"9_CodeCheckFix_UT@@Tests/CodeCheck.wlt:44,1-45,31"]
VerificationTest[CodeCheckFix["\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n...\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {61, 60}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n...\n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n...\n"|>
	,TestID->"10_CodeCheckFix_UT@@Tests/CodeCheck.wlt:46,1-47,32"]
VerificationTest[CodeCheckFix["\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n    ...\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {65, 64}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n    ...\n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n    ...\n"|>
	,TestID->"11_CodeCheckFix_UT@@Tests/CodeCheck.wlt:48,1-49,32"]
VerificationTest[CodeCheckFix["\nminValue = NMinimize[{f[k], constraint1, constraint2, ...}, {k, kMin, kMax}]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {56, 55}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\nminValue = NMinimize[{f[k], constraint1, constraint2, ...}, {k, kMin, kMax}]\n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nminValue = NMinimize[{f[k], constraint1, constraint2, ...}, {k, kMin, kMax}]\n"|>
	,TestID->"12_CodeCheckFix_UT@@Tests/CodeCheck.wlt:50,1-51,32"]
VerificationTest[CodeCheckFix["\nlist = {a1, a2, a3, ..., an};  (* replace with your list of numbers *)\nmodResults = Mod[Rest[list], Most[list]]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {22, 21}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\nlist = {a1, a2, a3, ..., an};  (* replace with your list of numbers *)\nmodResults = Mod[Rest[list], Most[list]]\n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nlist = {a1, a2, a3, ..., an};  (* replace with your list of numbers *)\nmodResults = Mod[Rest[list], Most[list]]\n"|>
	,TestID->"13_CodeCheckFix_UT@@Tests/CodeCheck.wlt:52,1-53,32"]
VerificationTest[CodeCheckFix["\n(* Define your function *)\n\tf[k_] := Module[{...}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {47, 46}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {53, 52}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\n(* Define your function *)\n\tf[k_] := Module[{...}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}, {"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\n(* Define your function *)\n\tf[k_] := Module[{...}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n"|>
	,TestID->"14_CodeCheckFix_UT@@Tests/CodeCheck.wlt:54,1-55,32"]
VerificationTest[CodeCheckFix["\nGraphics3D[\n\t  Module[{...}, \n\t    ...\n\t    (*The full base perimeter now in black*)\n\t    {Black, Line[{{-14.5, -14.5, 29}, {14.5, -14.5, 29}, {14.5, 14.5, 29}, {-14.5, 14.5, 29}, {-14.5, -14.5, 29}}]}\n\t    ...\n\t  ], \n\t  ...\n\t]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {25, 24}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {37, 36}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {223, 222}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ImplicitTimesAcrossLines", "Implicit ``Times`` across lines.", "Error", <|CodeParser`Source -> {86, 86}, ConfidenceLevel -> 0.95, CodeParser`CodeActions -> {CodeParser`CodeAction["Insert ``*``", CodeParser`InsertNode, <|CodeParser`Source -> {86, 86}, "InsertionNode" -> CodeParser`LeafNode[Token`Star, "*", <||>]|>], CodeParser`CodeAction["Insert ``;``", CodeParser`InsertNode, <|CodeParser`Source -> {86, 86}, "InsertionNode" -> CodeParser`LeafNode[Token`Semi, ";", <||>]|>], CodeParser`CodeAction["Insert ``,``", CodeParser`InsertNode, <|CodeParser`Source -> {86, 86}, "InsertionNode" -> CodeParser`LeafNode[Token`Comma, ",", <||>]|>]}|>]}, "OverallSeverity" -> 4|>, "Success" -> False, "TotalFixes" -> 0, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> False, "FixedCode" -> Missing["Pattern not handled", {{"Error", "ImplicitTimesAcrossLines"}, {"Fatal", "ExpectedOperand"}, {"Fatal", "ExpectedOperand"}, {"Fatal", "ExpectedOperand"}}], "FixedPatterns" -> {{{"Error", "ImplicitTimesAcrossLines"}, {"Fatal", "ExpectedOperand"}, {"Fatal", "ExpectedOperand"}, {"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nGraphics3D[\n\t  Module[{...}, \n\t    ...\n\t    (*The full base perimeter now in black*)\n\t    {Black, Line[{{-14.5, -14.5, 29}, {14.5, -14.5, 29}, {14.5, 14.5, 29}, {-14.5, 14.5, 29}, {-14.5, -14.5, 29}}]}\n\t    ...\n\t  ], \n\t  ...\n\t]\n"|>
	,TestID->"15_CodeCheckFix_UT@@Tests/CodeCheck.wlt:56,1-57,32"]
VerificationTest[CodeCheckFix["k->(* 111 *);"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {13, 12}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "k->(* 111 *);", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "k->(* 111 *);"|>
	,TestID->"16_CodeCheckFix_UT@@Tests/CodeCheck.wlt:58,1-59,32"]
VerificationTest[CodeCheckFix["k->;"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {4, 3}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> False, "TotalFixes" -> 0, "LikelyFalsePositive" -> Missing[], "SafeToEvaluate" -> Missing[], "FixedCode" -> Missing["Expected Operand (no place holder(s) detected)"], "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "k->;"|>
	,TestID->"17_CodeCheckFix_UT@@Tests/CodeCheck.wlt:60,1-61,32"]
VerificationTest[CodeCheckFix["k:=(* 111 *);"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {13, 12}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "k:=(* 111 *);", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "k:=(* 111 *);"|>
	,TestID->"18_CodeCheckFix_UT@@Tests/CodeCheck.wlt:62,1-63,32"]
VerificationTest[CodeCheckFix["k[a_]:=   (* 111 *)   ;"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {23, 22}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "k[a_]:=   (* 111 *)   ;", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "k[a_]:=   (* 111 *)   ;"|>
	,TestID->"19_CodeCheckFix_UT@@Tests/CodeCheck.wlt:64,1-65,32"]
VerificationTest[CodeCheckFix["k[,(* 111 *)];"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {3, 2}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`nextSrc[{3, 2}]|>]}|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {13, 12}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{13, 12}]|>]}|>]}, "OverallSeverity" -> 3|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "k[(* 111 *)];", "FixedPatterns" -> {{{"Error", "Comma"}, {"Error", "Comma"}}}, "OriginalCode" -> "k[,(* 111 *)];"|>
	,TestID->"20_CodeCheckFix_UT@@Tests/CodeCheck.wlt:66,1-67,32"]
VerificationTest[CodeCheckFix["\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] = (* your existing function definition *)\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {83, 82}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] = (* your existing function definition *)\n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] = (* your existing function definition *)\n"|>
	,TestID->"21_CodeCheckFix_UT@@Tests/CodeCheck.wlt:68,1-69,32"]
VerificationTest[CodeCheckFix["\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =      (* your existing function definition *)    \n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {92, 91}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =      (* your existing function definition *)    \n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =      (* your existing function definition *)    \n"|>
	,TestID->"22_CodeCheckFix_UT@@Tests/CodeCheck.wlt:70,1-71,32"]
VerificationTest[CodeCheckFix["\nMixtilinearExcircles[triangle_] := Module[\n  {circumcircle, vertices, excircles},\n  vertices = triangle;\n  circumcircle = Circumsphere[Triangle[vertices]];\n  \n  excircles = Table[\n    Module[{vertex, tangentPoint, excircleCenter, excircleRadius},\n      vertex = vertices[[i]];\n      \n      (* Calculate tangent point on the circumcircle *)\n      tangentPoint = (* Obtain the correct tangent point here *);\n      \n      (* Calculate the center of the excircle *)\n      excircleCenter = (* Calculate the center based on tangent properties *);\n      \n      (* Calculate the radius of the excircle *)\n      excircleRadius = Norm[excircleCenter - tangentPoint];\n      \n      {Circle[excircleCenter, excircleRadius]}\n    ],\n    {i, Length[vertices]}\n  ];\n  \n  excircles\n]\n\n(* Example usage *)\ntriangle = {{0, 0}, {4, 3}, {4, 0}};\nMixtilinearExcircles[triangle]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {406, 405}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {541, 540}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\nMixtilinearExcircles[triangle_] := Module[\n  {circumcircle, vertices, excircles},\n  vertices = triangle;\n  circumcircle = Circumsphere[Triangle[vertices]];\n  \n  excircles = Table[\n    Module[{vertex, tangentPoint, excircleCenter, excircleRadius},\n      vertex = vertices[[i]];\n      \n      (* Calculate tangent point on the circumcircle *)\n      tangentPoint = (* Obtain the correct tangent point here *);\n      \n      (* Calculate the center of the excircle *)\n      excircleCenter = (* Calculate the center based on tangent properties *);\n      \n      (* Calculate the radius of the excircle *)\n      excircleRadius = Norm[excircleCenter - tangentPoint];\n      \n      {Circle[excircleCenter, excircleRadius]}\n    ],\n    {i, Length[vertices]}\n  ];\n  \n  excircles\n]\n\n(* Example usage *)\ntriangle = {{0, 0}, {4, 3}, {4, 0}};\nMixtilinearExcircles[triangle]\n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}, {"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nMixtilinearExcircles[triangle_] := Module[\n  {circumcircle, vertices, excircles},\n  vertices = triangle;\n  circumcircle = Circumsphere[Triangle[vertices]];\n  \n  excircles = Table[\n    Module[{vertex, tangentPoint, excircleCenter, excircleRadius},\n      vertex = vertices[[i]];\n      \n      (* Calculate tangent point on the circumcircle *)\n      tangentPoint = (* Obtain the correct tangent point here *);\n      \n      (* Calculate the center of the excircle *)\n      excircleCenter = (* Calculate the center based on tangent properties *);\n      \n      (* Calculate the radius of the excircle *)\n      excircleRadius = Norm[excircleCenter - tangentPoint];\n      \n      {Circle[excircleCenter, excircleRadius]}\n    ],\n    {i, Length[vertices]}\n  ];\n  \n  excircles\n]\n\n(* Example usage *)\ntriangle = {{0, 0}, {4, 3}, {4, 0}};\nMixtilinearExcircles[triangle]\n"|>
	,TestID->"23_CodeCheckFix_UT@@Tests/CodeCheck.wlt:72,1-73,32"]
VerificationTest[CodeCheckFix["\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     ... (* your existing function definition *)    \n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {47, 46}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     ... (* your existing function definition *)    \n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     ... (* your existing function definition *)    \n"|>
	,TestID->"24_CodeCheckFix_UT@@Tests/CodeCheck.wlt:74,1-75,32"]
VerificationTest[CodeCheckFix["\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     (* your existing function definition *) ...    \n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {87, 86}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     (* your existing function definition *) ...    \n", "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}}}, "OriginalCode" -> "\nf[0] = 2^13 * (2^9 - 1);\nf[k_] := f[k] =     (* your existing function definition *) ...    \n"|>
	,TestID->"25_CodeCheckFix_UT@@Tests/CodeCheck.wlt:76,1-77,32"]
VerificationTest[CodeCheckFix["f1[x,...,y,]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {6, 5}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {12, 11}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{12, 11}]|>]}|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedPatterns" -> {{{"Error", "Comma"}}, {{"Fatal", "ExpectedOperand"}}}, "FixedCode" -> "f1[x,...,y]", "OriginalCode" -> "f1[x,...,y,]"|>
	,TestID->"26_CodeCheckFix_UT@@Tests/CodeCheck.wlt:78,1-79,32"]
VerificationTest[CodeCheckFix["\nranges = Tuples[{{-1, 0, , 1}, Range[-3, 3], Range[-3, 3]}];\n...\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {63, 62}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {27, 26}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{27, 26}]|>]}|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedPatterns" -> {{{"Error", "Comma"}}, {{"Fatal", "ExpectedOperand"}}}, "FixedCode" -> "\nranges = Tuples[{{-1, 0, 1}, Range[-3, 3], Range[-3, 3]}];\n...\n", "OriginalCode" -> "\nranges = Tuples[{{-1, 0, , 1}, Range[-3, 3], Range[-3, 3]}];\n...\n"|>
	,TestID->"27_CodeCheckFix_UT@@Tests/CodeCheck.wlt:80,1-81,32"]
VerificationTest[CodeCheckFix["\n(* Define your function *)\n\tf[k_] := Module[{...,,,}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {47, 46}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {56, 55}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {51, 50}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{51, 50}]|>]}|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {52, 51}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{52, 51}]|>]}|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {53, 52}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`prevSrc[{53, 52}]|>]}|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 3, "LikelyFalsePositive" -> True, "SafeToEvaluate" -> False, "FixedPatterns" -> {{{"Error", "Comma"}, {"Error", "Comma"}, {"Error", "Comma"}}, {{"Fatal", "ExpectedOperand"}, {"Fatal", "ExpectedOperand"}}}, "FixedCode" -> "\n(* Define your function *)\n\tf[k_] := Module[{...}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n", "OriginalCode" -> "\n(* Define your function *)\n\tf[k_] := Module[{...,,,}, ...]\n\t\n\t(* Use TraceView to profile the function *)\n\tResourceFunction[\"TraceView\"][f[10]]\n"|>
	,TestID->"28_CodeCheckFix_UT@@Tests/CodeCheck.wlt:82,1-83,32"]
VerificationTest[CodeCheckFix["eq= x==y"], <|"ErrorsDetected" -> False, "CodeInspector" -> <|"InspectionObjects" -> {}, "OverallSeverity" -> None|>, "FixedCode" -> Missing["No errors detected"], "OriginalCode" -> "eq= x==y"|>
	,TestID->"29_CodeCheckFix_UT@@Tests/CodeCheck.wlt:84,1-85,32"]
VerificationTest[CodeCheckFix["eq= x<=y"], <|"ErrorsDetected" -> False, "CodeInspector" -> <|"InspectionObjects" -> {}, "OverallSeverity" -> None|>, "FixedCode" -> Missing["No errors detected"], "OriginalCode" -> "eq= x<=y"|>
	,TestID->"30_CodeCheckFix_UT@@Tests/CodeCheck.wlt:86,1-87,32"]
VerificationTest[CodeCheckFix["eq= x>=y"], <|"ErrorsDetected" -> False, "CodeInspector" -> <|"InspectionObjects" -> {}, "OverallSeverity" -> None|>, "FixedCode" -> Missing["No errors detected"], "OriginalCode" -> "eq= x>=y"|>
	,TestID->"31_CodeCheckFix_UT@@Tests/CodeCheck.wlt:88,1-89,32"]
VerificationTest[CodeCheckFix["\n![Image](attachment://content-22840)\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["OpenSquare", "Invalid syntax for ``[]``.", "Fatal", <|CodeParser`Source -> {3, 9}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {22, 21}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> Missing["Not WL code"], "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> False, "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}, {"Fatal", "OpenSquare"}}}, "OriginalCode" -> "\n![Image](attachment://content-22840)\n"|>
	,TestID->"32_CodeCheckFix_UT@@Tests/CodeCheck.wlt:90,1-91,32"]
VerificationTest[CodeCheckFix["\n![Comparative Air Speed Velocities](attachment://content-6zubu)\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["OpenSquare", "Invalid syntax for ``[]``.", "Fatal", <|CodeParser`Source -> {3, 36}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {49, 48}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> Missing["Not WL code"], "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> False, "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}, {"Fatal", "OpenSquare"}}}, "OriginalCode" -> "\n![Comparative Air Speed Velocities](attachment://content-6zubu)\n"|>
	,TestID->"33_CodeCheckFix_UT@@Tests/CodeCheck.wlt:92,1-93,32"]
VerificationTest[CodeCheckFix["                                                                                                                                                                                                                                 * [FindMinimum](paclet:ref/FindMinimum|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {226, 225}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["OpenSquare", "Invalid syntax for ``[]``.", "Fatal", <|CodeParser`Source -> {228, 240}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> Missing["Not WL code"], "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> False, "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}, {"Fatal", "OpenSquare"}}}, "OriginalCode" -> "                                                                                                                                                                                                                                 * [FindMinimum](paclet:ref/FindMinimum)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 "|>
	,TestID->"34_CodeCheckFix_UT@@Tests/CodeCheck.wlt:94,1-95,32"]
VerificationTest[CodeCheckFixolynomial Factoring & Decomposition](paclet:guide/PolynomialFactoring)\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {762, 761}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["OpenSquare", "Invalid syntax for ``[]``.", "Fatal", <|CodeParser`Source -> {764, 801}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ImplicitTimesFunction", "Unexpected implicit ``Times`` after ``Function``.", "Error", <|CodeParser`Source -> {765, 786}, ConfidenceLevel -> 0.95, CodeParser`CodeActions -> {CodeParser`CodeAction["Replace ``&`` with ``&&``", CodeParser`ReplaceNode, <|CodeParser`Source -> {786, 786}, "ReplacementNode" -> CodeParser`LeafNode[Token`AndAnd, "&&", <||>]|>]}|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> Missing["Not WL code"], "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> False, "FixedPatterns" -> {{{"Error", "ImplicitTimesFunction"}, {"Fatal", "ExpectedOperand"}, {"Fatal", "OpenSquare"}}}, "OriginalCodeolynomial Factoring & Decomposition](paclet:guide/PolynomialFactoring)\n"|>
	,TestID->"35_CodeCheckFix_UT@@Tests/CodeCheck.wlt:96,1-97,32"]
VerificationTest[CodeCheckFix["\n![Sphere](attachment://content-57d9d4f5-650f-4a8c-a4bc-33b4c3a7ec86.png)\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["OpenSquare", "Invalid syntax for ``[]``.", "Fatal", <|CodeParser`Source -> {3, 10}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {23, 22}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "FixedCode" -> Missing["Not WL code"], "Success" -> True, "TotalFixes" -> 0, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> False, "FixedPatterns" -> {{{"Fatal", "ExpectedOperand"}, {"Fatal", "OpenSquare"}}}, "OriginalCode" -> "\n![Sphere](attachment://content-57d9d4f5-650f-4a8c-a4bc-33b4c3a7ec86.png)\n"|>
	,TestID->"36_CodeCheckFix_UT@@Tests/CodeCheck.wlt:98,1-99,32"]
VerificationTest[CodeCheckFix["f[{{3}}}"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {2, 2}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {8, 8}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "f[{{3}}]", "FixedPatterns" -> {{{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "OriginalCode" -> "f[{{3}}}"|>
	,TestID->"37_CodeCheckFix_UT@@Tests/CodeCheck.wlt:100,1-101,32"]
VerificationTest[CodeCheckFix["f[{{3,4}}}"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {2, 2}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {10, 10}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "f[{{3,4}}]", "FixedPatterns" -> {{{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "OriginalCode" -> "f[{{3,4}}}"|>
	,TestID->"38_CodeCheckFix_UT@@Tests/CodeCheck.wlt:102,1-103,32"]
VerificationTest[CodeCheckFix["f[{{3,4}]}"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {3, 3}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {10, 10}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 2, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedPatterns" -> {{{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}, {{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "FixedCode" -> "f[{{3,4}}]", "OriginalCode" -> "f[{{3,4}]}"|>
	,TestID->"39_CodeCheckFix_UT@@Tests/CodeCheck.wlt:104,1-105,32"]
VerificationTest[CodeCheckFix["g[f[{{3,4}}},\n5]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {2, 2}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {12, 12}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {13, 12}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`nextSrc[{13, 12}]|>]}|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "g[f[{{3,4}}],\n5]", "FixedPatterns" -> {{{"Error", "Comma"}, {"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "OriginalCode" -> "g[f[{{3,4}}},\n5]"|>
	,TestID->"40_CodeCheckFix_UT@@Tests/CodeCheck.wlt:106,1-107,32"]
VerificationTest[CodeCheckFix["{g[f[{{3,4}}},5]}"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["CommaTopLevel", "Comma at top-level.", "Fatal", <|CodeParser`Source -> {1, 15}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {3, 3}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {5, 5}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {16, 16}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {17, 17}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "{g[f[{{3,4}}],5]}", "FixedPatterns" -> {{{"Fatal", "CommaTopLevel"}, {"Fatal", "GroupMissingCloser"}, {"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}, {"Fatal", "UnexpectedCloser"}}}, "OriginalCode" -> "{g[f[{{3,4}}},5]}"|>
	,TestID->"41_CodeCheckFix_UT@@Tests/CodeCheck.wlt:108,1-109,32"]
VerificationTest[CodeCheckFix["g[f[{{3,4}}},h[}]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {2, 2}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {12, 12}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {16, 16}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {13, 12}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`nextSrc[{13, 12}]|>]}|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 2, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedPatterns" -> {{{"Error", "Comma"}, {"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}, {"Fatal", "UnexpectedCloser"}}, {{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "FixedCode" -> "g[f[{{3,4}}],h[]]", "OriginalCode" -> "g[f[{{3,4}}},h[}]"|>
	,TestID->"42_CodeCheckFix_UT@@Tests/CodeCheck.wlt:110,1-111,32"]
VerificationTest[CodeCheckFix["g[(dothis;1},2]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {3, 3}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {12, 12}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["Comma", "Extra ``,``.", "Error", <|CodeParser`Source -> {13, 12}, ConfidenceLevel -> 1., CodeParser`CodeActions -> {CodeParser`CodeAction["Delete ``,``", CodeParser`DeleteText, <|CodeParser`Source -> CodeInspector`ConcreteRules`Private`nextSrc[{13, 12}]|>]}|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "g[(dothis;1),2]", "FixedPatterns" -> {{{"Error", "Comma"}, {"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "OriginalCode" -> "g[(dothis;1},2]"|>
	,TestID->"43_CodeCheckFix_UT@@Tests/CodeCheck.wlt:112,1-113,32"]
VerificationTest[CodeCheckFix["foo[1,2,g[{3]]]"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {11, 11}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {15, 15}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "foo[1,2,g[{3}]]", "FixedPatterns" -> {{{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "OriginalCode" -> "foo[1,2,g[{3]]]"|>
	,TestID->"44_CodeCheckFix_UT@@Tests/CodeCheck.wlt:114,1-115,32"]
VerificationTest[CodeCheckFix["(1;2;g[3))"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {7, 7}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {10, 10}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "(1;2;g[3])", "FixedPatterns" -> {{{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "OriginalCode" -> "(1;2;g[3))"|>
	,TestID->"45_CodeCheckFix_UT@@Tests/CodeCheck.wlt:116,1-117,32"]
VerificationTest[CodeCheckFix["(1;2;g[3\n   ))"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {7, 7}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {14, 14}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 1, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedCode" -> "(1;2;g[3\n   ])", "FixedPatterns" -> {{{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "OriginalCode" -> "(1;2;g[3\n   ))"|>
	,TestID->"46_CodeCheckFix_UT@@Tests/CodeCheck.wlt:118,1-119,32"]
VerificationTest[CodeCheckFix["\nmaxC = 20;\n\tprimTriples = Select[\n\t  With[{m = #1, n = #2}, \n\t    {m ^ 2 - n ^ 2, 2 m n, m ^ 2 + n ^ 2}\n\t  ] & @@@ \n\t  Select[\n\t    Flatten[Table[{m, n}, {n, Floor[Sqrt[maxC / 2]}], {m, n + 1, Floor[Sqrt[maxC]], 2}], 1], \n\t    #[[1]] ^ 2 + #[[2]] ^ 2 <= maxC &\n\t  ], \n\t  Apply[CoprimeQ, #] &\n\t];\n\t\n\tprimTriples\n"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["CommaTopLevel", "Comma at top-level.", "Fatal", <|CodeParser`Source -> {14, 292}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {165, 165}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {295, 295}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["ExpectedOperand", "Expected an operand.", "Fatal", <|CodeParser`Source -> {296, 295}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> True, "TotalFixes" -> 2, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> True, "FixedPatterns" -> {{{"Fatal", "CommaTopLevel"}, {"Fatal", "ExpectedOperand"}, {"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}, {{"Fatal", "CommaTopLevel"}, {"Fatal", "ExpectedOperand"}, {"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}}, "FixedCode" -> "\nmaxC = 20;\n\tprimTriples = Select[\n\t  With[{m = #1, n = #2}, \n\t    {m ^ 2 - n ^ 2, 2 m n, m ^ 2 + n ^ 2}\n\t  ] & @@@ \n\t  Select[\n\t    Flatten[Table[{m, n}, {n, Floor[Sqrt[maxC / 2]]}, {m, n + 1, Floor[Sqrt[maxC]], 2}], 1], \n\t    #[[1]] ^ 2 + #[[2]] ^ 2 <= maxC &\n\t  ], \n\t  Apply[CoprimeQ, #] &\n\t];\n\t\n\tprimTriples\n", "OriginalCode" -> "\nmaxC = 20;\n\tprimTriples = Select[\n\t  With[{m = #1, n = #2}, \n\t    {m ^ 2 - n ^ 2, 2 m n, m ^ 2 + n ^ 2}\n\t  ] & @@@ \n\t  Select[\n\t    Flatten[Table[{m, n}, {n, Floor[Sqrt[maxC / 2]}], {m, n + 1, Floor[Sqrt[maxC]], 2}], 1], \n\t    #[[1]] ^ 2 + #[[2]] ^ 2 <= maxC &\n\t  ], \n\t  Apply[CoprimeQ, #] &\n\t];\n\t\n\tprimTriples\n"|>
	,TestID->"47_CodeCheckFix_UT@@Tests/CodeCheck.wlt:120,1-121,32"]
VerificationTest[CodeCheckFix["g[{[{a]}]}"], <|"ErrorsDetected" -> True, "CodeInspector" -> <|"InspectionObjects" -> {CodeInspector`InspectionObject["OpenSquare", "Invalid syntax for ``[]``.", "Fatal", <|CodeParser`Source -> {4, 7}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["GroupMissingCloser", "Missing closer.", "Fatal", <|CodeParser`Source -> {5, 5}, ConfidenceLevel -> 1.|>], CodeInspector`InspectionObject["UnexpectedCloser", "Unexpected closer.", "Fatal", <|CodeParser`Source -> {10, 10}, ConfidenceLevel -> 1.|>]}, "OverallSeverity" -> 4|>, "Success" -> False, "TotalFixes" -> 4, "LikelyFalsePositive" -> False, "SafeToEvaluate" -> False, "FixedPatterns" -> {{{"Fatal", "GroupMissingCloser"}, {"Fatal", "OpenSquare"}, {"Fatal", "UnexpectedCloser"}}, {{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}, {{"Fatal", "GroupMissingCloser"}, {"Fatal", "OpenSquare"}, {"Fatal", "UnexpectedCloser"}}, {{"Fatal", "GroupMissingCloser"}, {"Fatal", "UnexpectedCloser"}}, {{"Fatal", "OpenSquare"}}}, "FixedCode" -> Missing["Pattern not handled", {{"Fatal", "OpenSquare"}}], "OriginalCode" -> "g[{[{a]}]}"|>
	,TestID->"48_CodeCheckFix_UT@@Tests/CodeCheck.wlt:122,1-123,32"]